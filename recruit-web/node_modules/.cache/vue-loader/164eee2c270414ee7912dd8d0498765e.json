{"remainingRequest":"D:\\001JavaTools\\001Java项目\\招聘系统\\recruit-system\\recruit-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\001JavaTools\\001Java项目\\招聘系统\\recruit-system\\recruit-web\\src\\view\\about\\msg.vue?vue&type=style&index=1&id=790200ae&lang=scss&scoped=true&","dependencies":[{"path":"D:\\001JavaTools\\001Java项目\\招聘系统\\recruit-system\\recruit-web\\src\\view\\about\\msg.vue","mtime":1743604069341},{"path":"D:\\001JavaTools\\001Java项目\\招聘系统\\recruit-system\\recruit-web\\node_modules\\css-loader\\index.js","mtime":499162500000},{"path":"D:\\001JavaTools\\001Java项目\\招聘系统\\recruit-system\\recruit-web\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1655715156000},{"path":"D:\\001JavaTools\\001Java项目\\招聘系统\\recruit-system\\recruit-web\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"D:\\001JavaTools\\001Java项目\\招聘系统\\recruit-system\\recruit-web\\node_modules\\sass-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\001JavaTools\\001Java项目\\招聘系统\\recruit-system\\recruit-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\001JavaTools\\001Java项目\\招聘系统\\recruit-system\\recruit-web\\node_modules\\vue-loader\\lib\\index.js","mtime":1655715099000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.ws-msg-form {\n  width: 800px;\n  height: 700px;\n\n  img {\n    user-select: none;\n    pointer-events: none;\n    border: 1px solid #ffffff;\n  }\n}\n\n.msg-content {\n  margin-left: 10px;\n  display: inline-block;\n  width: 100%;\n  height: 80%;\n  border: 1px solid rgb(143, 141, 141);\n  background-color: transparent !important;\n  border-radius: 5px;\n  overflow: hidden;\n  position: relative;\n}\n\n.msg-title {\n  position: absolute;\n  top: 0;\n  text-align: center;\n  width: 100%;\n  background-color: rgba(39, 39, 39, 0.219);\n  height: 30px;\n  line-height: 30px;\n}\n\n.msg-content .left {\n  margin-top: 30px;\n  width: 200px;\n  height: 95%;\n  border-right: 1px solid rgb(143, 141, 141);\n  overflow: auto;\n  overflow-x: hidden;\n  display: inline-block;\n\n  &::-webkit-scrollbar {\n    width: 5px;\n  }\n\n  &::-webkit-scrollbar-button {\n    display: none;\n  }\n\n  &::-webkit-scrollbar-thumb {\n    background-color: rgba(124, 124, 124, 0.438);\n    border-radius: 5px;\n  }\n\n  .item {\n    position: relative;\n    height: 78px;\n    padding-left: 20px;\n    display: flex;\n    align-items: center;\n    cursor: pointer;\n    user-select: none;\n\n    &:hover {\n      background-color: rgba(146, 146, 146, 0.3);\n    }\n\n    .icon {\n      width: 40px !important;\n      height: 40px !important;\n      border-radius: 40px;\n    }\n\n    div {\n      position: absolute;\n      top: 20px;\n      left: 65px;\n      font-size: 14px;\n    }\n\n    .msg {\n      top: 45px;\n      font-size: 12px;\n      color: rgb(114, 114, 114);\n      overflow: hidden;\n      text-overflow: ellipsis;\n      white-space: nowrap;\n      max-width: 130px;\n    }\n\n    .newTip,\n    .online {\n      display: inline-block;\n      width: 10px;\n      height: 10px;\n      background: red;\n      border-radius: 10px;\n      position: absolute;\n      left: 10px;\n      top: 20px;\n    }\n\n    .online {\n      background-color: greenyellow;\n      top: 50px;\n      left: 20px;\n    }\n\n    .chat-time {\n      display: inline-block;\n      font-size: 13px;\n      position: absolute;\n      right: 5px;\n      top: 5px;\n      opacity: 0.7;\n    }\n  }\n}\n\n.timestamp {\n  text-align: center;\n  font-size: 12px;\n  color: #999;\n  margin: 8px 0 2px 0;\n  padding: 0 5px;\n  clear: both;\n  width: 100%;\n}\n\n/* Adjust message item spacing to accommodate the timestamp */\n.msg-item {\n  width: 100%;\n  margin: 5px 0;\n  position: relative;\n  transition: all 0.5s;\n  clear: both;\n}\n\n.msg-content .right {\n  display: inline-block !important;\n  height: 94% !important;\n  width: 600px !important;\n  position: absolute !important;\n  margin-top: 30px;\n\n  .form {\n    position: relative;\n    height: 100%;\n    width: 100%;\n\n    .content {\n      height: 385px;\n      overflow: auto;\n      padding: 0 10px;\n      background-color: rgba(0, 0, 0, 0.03) !important;\n\n      &::-webkit-scrollbar {\n        overflow-y: hidden;\n      }\n\n      .msg-item {\n        width: 100%;\n        margin: 10px 0;\n        position: relative;\n        transition: all 0.5s;\n\n        > div img {\n          display: inline-block;\n          width: 35px;\n          height: 35px;\n        }\n\n        span {\n          display: inline-block;\n          background: white;\n          padding: 10px 15px;\n          font-size: 15px;\n          max-width: 350px;\n          margin: 10px 0;\n          word-break: break-word;\n        }\n\n        .tip {\n          width: 400px;\n          height: 260px;\n          border-radius: 10px;\n          background-color: white;\n          margin-left: 60px;\n        }\n\n        .sys,\n        .target {\n          float: left;\n          margin-left: 10px;\n          width: 100%;\n\n          span {\n            border-radius: 20px;\n            border-top-left-radius: 0;\n            margin-left: 35px;\n          }\n\n          img {\n            position: absolute;\n            left: 0;\n          }\n        }\n\n        .this {\n          position: relative;\n          float: right;\n          width: 100%;\n\n          span {\n            float: right;\n            background-color: rgb(128, 185, 242);\n            margin-right: 45px;\n            color: white;\n            border-radius: 20px;\n            border-top-right-radius: 0;\n          }\n\n          img {\n            position: absolute;\n            right: 0;\n          }\n        }\n\n        .birth-anim {\n          animation-name: birth;\n          animation-duration: 0.5s;\n          animation-iteration-count: 1;\n        }\n\n        // 样式穿透\n        ::v-deep .sys-msg {\n          > * {\n            margin: 15px 0;\n            color: #505050;\n            font-size: 15px;\n          }\n\n          h2 {\n            font-weight: 700;\n            font-size: 18px;\n          }\n\n          .info {\n            width: 400px;\n\n            span {\n              display: inline-block;\n              margin-bottom: 10px;\n            }\n\n            span:nth-child(1) {\n              width: 100px !important;\n              opacity: 0.7;\n            }\n          }\n        }\n\n        @keyframes birth {\n          0% {\n            transform: translatey(50px);\n          }\n\n          100% {\n            transform: translatey(0px);\n          }\n        }\n      }\n    }\n  }\n\n  .msg-footer {\n    position: relative;\n    border-top: 1px solid rgb(143, 141, 141);\n\n    textarea {\n      resize: none;\n      outline: none;\n      width: 100%;\n      height: 100px;\n      border: none;\n    }\n\n    .send {\n      position: absolute;\n      right: 10px;\n    }\n  }\n}\n\n.select-style {\n  background-color: rgba(146, 146, 146, 0.3);\n}\n\n.rou-btn {\n  margin-top: 5px;\n  display: inline-block;\n  border: 1px solid cornflowerblue;\n  color: cornflowerblue;\n  border-radius: 5px;\n  padding: 3px 5px;\n\n  &:hover {\n    border: 1px solid teal;\n    color: teal;\n  }\n}\n",{"version":3,"sources":["msg.vue"],"names":[],"mappingswfile":"msg.vue","sourceRoot":"src/view/about","sourcesContent":["<template>\n  <div class=\"ws-msg-form\">\n    <div class=\"msg-content\">\n      <p class=\"msg-title\" v-if=\"selectInfo.id == 0\">留言沟通</p>\n      <p class=\"msg-title\" v-else>\n        正在与 <b>{{ selectInfo.name }}</b> 交流\n      </p>\n      <div class=\"left\">\n        <div\n          class=\"item\"\n          v-for=\"(item, index) in chatInfo\"\n          :key=\"index\"\n          @click=\"clickChat(item)\"\n          :class=\"{ 'select-style': item.id == selectInfo.id }\"\n        >\n          <img class=\"icon\" :src=\"item.icon ? item.icon : defaultImg\" />\n          <!-- <img class=\"icon\" :src=\"defaultImg\" v-else> -->\n          <div class=\"name\">{{ item.name }}</div>\n          <div class=\"msg\" v-if=\"item.type != 'sys'\">\n            <span v-if=\"item.msg && item.msg.length > 0\">{{ item.msg[item.msg.length - 1].text }}</span>\n            <span v-else>快来与对方进行沟通吧</span>\n          </div>\n          <div class=\"msg\" v-else>{{ item.header }}</div>\n          <span :class=\"{ newTip: item.isRead == 0 }\"></span>\n          <span class=\"chat-time\" v-if=\"item.msg && item.msg.length > 0\">{{ formatSidebarTime(item.msg[item.msg.length - 1].time) }}</span>\n        </div>\n      </div>\n      <div class=\"right\">\n        <div class=\"form\">\n          <div class=\"content\" v-if=\"selectInfo.id == -1 || selectInfo.id > 0\">\n            <div v-if=\"selectInfo.msg.length > 0\">\n              <div class=\"msg-item\" v-for=\"(item, index) in selectInfo.msg\" :key=\"index\">\n                <div class=\"timestamp\" v-if=\"shouldShowTimestamp(index)\">\n                  {{ formatMessageTime(item.time) }}\n                </div>\n                <div :class=\"item.type\">\n                  <img :src=\"me.avatar ? me.avatar : defaultImg\" v-if=\"item.type == 'this'\" />\n                  <img :src=\"selectInfo.icon\" v-else />\n                  <span v-html=\"item.text\"></span>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div class=\"content\" v-else></div>\n\n          <div class=\"msg-footer\">\n            <textarea v-model=\"inputRedis[selectInfo.id]\" maxlength=\"500\"></textarea>\n            <div class=\"send\">\n              <el-row>\n                <span v-if=\"inputRedis[selectInfo.id]\">{{ inputRedis[selectInfo.id].length }}/500</span>\n                <span v-else>0/500</span>\n                <el-button type=\"primary\" @click=\"sendMsg\">发送</el-button>\n              </el-row>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { Application } from '@/model/application'\nimport Utils from '@/lin/util/util'\nimport store from '@/store'\nimport { formatMessageTime, formatSidebarTime, shouldShowTimestamp, formatTimestamp } from '<template>\n  <div class=\"ws-msg-form\">\n    <div class=\"msg-content\">\n      <p class=\"msg-title\" v-if=\"selectInfo.id == 0\">留言沟通</p>\n      <p class=\"msg-title\" v-else>\n        正在与 <b>{{ selectInfo.name }}</b> 交流\n      </p>\n      <div class=\"left\">\n        <div\n          class=\"item\"\n          v-for=\"(item, index) in chatInfo\"\n          :key=\"index\"\n          @click=\"clickChat(item)\"\n          :class=\"{ 'select-style': item.id == selectInfo.id }\"\n        >\n          <img class=\"icon\" :src=\"item.icon ? item.icon : defaultImg\" />\n          <!-- <img class=\"icon\" :src=\"defaultImg\" v-else> -->\n          <div class=\"name\">{{ item.name }}</div>\n          <div class=\"msg\" v-if=\"item.type != 'sys'\">\n            <span v-if=\"item.msg && item.msg.length > 0\">{{ item.msg[item.msg.length - 1].text }}</span>\n            <span v-else>快来与对方进行沟通吧</span>\n          </div>\n          <div class=\"msg\" v-else>{{ item.header }}</div>\n          <span :class=\"{ newTip: item.isRead == 0 }\"></span>\n          <span class=\"chat-time\" v-if=\"item.msg && item.msg.length > 0\">{{ formatSidebarTime(item.msg[item.msg.length - 1].time) }}</span>\n        </div>\n      </div>\n      <div class=\"right\">\n        <div class=\"form\">\n          <div class=\"content\" v-if=\"selectInfo.id == -1 || selectInfo.id > 0\">\n            <div v-if=\"selectInfo.msg.length > 0\">\n              <div class=\"msg-item\" v-for=\"(item, index) in selectInfo.msg\" :key=\"index\">\n                <div class=\"timestamp\" v-if=\"shouldShowTimestamp(index)\">\n                  {{ formatMessageTime(item.time) }}\n                </div>\n                <div :class=\"item.type\">\n                  <img :src=\"me.avatar ? me.avatar : defaultImg\" v-if=\"item.type == 'this'\" />\n                  <img :src=\"selectInfo.icon\" v-else />\n                  <span v-html=\"item.text\"></span>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div class=\"content\" v-else></div>\n\n          <div class=\"msg-footer\">\n            <textarea v-model=\"inputRedis[selectInfo.id]\" maxlength=\"500\"></textarea>\n            <div class=\"send\">\n              <el-row>\n                <span v-if=\"inputRedis[selectInfo.id]\">{{ inputRedis[selectInfo.id].length }}/500</span>\n                <span v-else>0/500</span>\n                <el-button type=\"primary\" @click=\"sendMsg\">发送</el-button>\n              </el-row>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { Application } from '@/model/application'\nimport Utils from '@/lin/util/util'\nimport store from '@/store'\nimport { formatMessageTime, formatSidebarTime, shouldShowTimestamp, formatTimestamp } from '@/utils/time-formatter'\n\nexport default {\n  data() {\n    return {\n      me: null,\n      inputRedis: {}, // 输入的内容缓存\n      defaultImg: require('@/assets/image/user/user.png'),\n      selectInfo: {\n        id: 0,\n        msg: [],\n      },\n      chatInfo: {},\n      hasHistoryMessages: false, // 标记是否有历史消息\n      target_info: [],\n      token_msg: {},\n      wsCtl: {\n        allow: true,\n        timer: null,\n      },\n      hart: {\n        timer: 5, // 每隔一段时间监听一次在线客户端 /s\n        type: 'ping',\n        timeObj: null,\n        check: {}, // 当客户端离线之后,第一次离线的加入对象内, 如果第二次还是离线,那么将目标用户标志为离线,避免重复闪烁\n      },\n    }\n  },\n  methods: {\n    // 使用导入的格式化方法\n    formatMessageTime,\n    formatSidebarTime,\n    \n    // 判断是否应该显示时间戳\n    shouldShowTimestamp(index) {\n      return shouldShowTimestamp(index, this.selectInfo.msg);\n    },\n    \n    clickChat(item) {\n      // console.log(\"item?\",item);\n      this.selectInfo = item\n      if (!item.isRead) {\n        this.$ws.ws.send(JSON.stringify({ type: 'state', readID: this.selectInfo.id }))\n        item.isRead = 1\n      }\n      this.moeScroll(10)\n    },\n    sendMsg() {\n      if (!this.wsCtl.allow) {\n        return\n      }\n      if (this.$ws.ws.readyState != 1) {\n        return this.$message.warning('暂时无法发送信息, 您与服务器的连接已断开.')\n      }\n      if (!this.inputRedis[this.selectInfo.id]) return\n      let inputMsg = this.inputRedis[this.selectInfo.id].slice(0, 500) // 限制字数\n      this.inputRedis[this.selectInfo.id] = '' // 清空输入框\n\n      // 使用格式化的时间戳\n      const timestamp = formatTimestamp()\n      this.selectInfo.msg.push({ type: 'this', text: inputMsg, time: timestamp })\n\n      this.wsCtl.timer = setTimeout(() => {\n        this.wsCtl.allow = true\n        clearTimeout(this.wsCtl.timer)\n        this.wsCtl.timer = null\n      }, 1000)\n\n      try {\n        this.$ws.ws.send(\n          JSON.stringify({\n            self: {\n              name: this.me.nickname,\n              icon: JSON.stringify(this.me.avatar).length > 100 ? 'null' : this.me.avatar,\n              id: this.me.id,\n            },\n            target: {\n              id: this.selectInfo.id,\n              name: this.selectInfo.name,\n              icon: JSON.stringify(this.selectInfo.icon).length > 100 ? 'null' : this.selectInfo.icon,\n            },\n            time: timestamp,\n            type: 'alone',\n            content: inputMsg,\n            recvID: this.selectInfo.id,\n          }),\n        )\n        this.moeScroll()\n      } catch (e) {\n        this.selectInfo.msg.push({\n          type: 'this',\n          text: '(发送失败)' + this.inputRedis[this.selectInfo.id],\n          time: timestamp,\n        })\n      }\n    },\n    recvMsg() {\n      if (this.$ws.ws) {\n        // 机器人默认在线,除非用户断开了与后台的连接\n        this.chatInfo['-1']['online'] = true\n        let msgInfo = { type: 'token', _id: this.me.id }\n        this.$ws.ws.send(JSON.stringify(msgInfo))\n\n        this.$ws.ws.onmessage = async res => {\n          let data = JSON.parse(res.data)\n          // console.log(\"res:\", data);\n          // 捕获系统消息并跳出\n          if (data.type == 'system') {\n            // 将匹配的内容结果传递给api,\n            let info = await Application.getMsg(Utils.filterStr(data.content))\n            this.chatInfo['-1'].msg.push({ type: 'sys', text: info.data, time: data.time })\n            this.moeScroll()\n            return\n          }\n\n          if (data.type == 'token') {\n            const info = {}\n            \n            // 检查是否有历史消息\n            if (data.content && data.content.length > 0) {\n              this.hasHistoryMessages = true\n            }\n\n            for (let i in data.content) {\n              let cls = data.content[i].recvId == this.me.id ? 'target' : 'this'\n              // 如果信息列表没有这个用户的数据\n              let keyID = data.content[i].sendId\n\n              if (info[keyID] == null) {\n                let name = JSON.parse(data.content[i].self).name\n                let icon = JSON.parse(data.content[i].self).icon\n                // 如果发送者的id是当前用户, 那么将写入数据的key修改为接收者的key\n                if (parseInt(this.me.id) == parseInt(keyID)) {\n                  keyID = data.content[i].recvId\n                  name = JSON.parse(data.content[i].target).name\n                  icon = JSON.parse(data.content[i].target).icon\n                }\n\n                // Skip system admin messages for user 1\n                if (keyID === '13' && this.me.id === 1) {\n                  continue\n                }\n\n                info[keyID] = keyID\n                let msg = [{ type: cls, text: data.content[i].content, time: data.content[i].timestamp }]\n\n                if (this.chatInfo[keyID] && this.chatInfo[keyID]['msg']) {\n                  // If we already have a chat with this ID and it has a message array, add to it\n                  this.chatInfo[keyID]['msg'].push(msg[0])\n                } else {\n                  // Otherwise create a new chat entry\n                  this.$set(\n                    this.chatInfo,\n                    keyID,\n                    this.packMsg(keyID, name, 'alone', data.content[i].time, icon, msg, 'null', 0),\n                  )\n                }\n              } else {\n                // If we've seen this user before in this data set, just add the message\n                if (keyID === '13' && this.me.id === 1) {\n                  // Skip system admin messages for user 1\n                  continue\n                }\n                this.chatInfo[keyID]['msg'].push({\n                  type: cls,\n                  text: data.content[i].content,\n                  time: data.content[i].timestamp,\n                })\n              }\n\n              this.chatInfo[keyID].isRead = data.readList.indexOf('^' + keyID + '&') != -1 ? 0 : 1\n            }\n\n            // If we're user 1, ensure system admin chat is removed\n            if (this.me.id === 1 && this.chatInfo['13']) {\n              delete this.chatInfo['13']\n            }\n\n            if (data.ContactID != -1) {\n              this.selectInfo = this.chatInfo[data.ContactID]\n              this.selectInfo.isRead = 1\n            } else {\n              let readList = data.readList\n                .replace(/&/g, '')\n                .split('^')\n                .filter(item => item != '')\n              if (readList.length) {\n                this.selectInfo = this.chatInfo[readList[0]]\n                if (this.selectInfo && !this.selectInfo.isRead) {\n                  this.$ws.ws.send(JSON.stringify({ type: 'state', readID: this.selectInfo.id }))\n                  this.selectInfo.isRead = 1\n                }\n              }\n            }\n\n            // 心跳包\n            this.hartCheck(this.chatInfo)\n            this.hart.timeObj = setInterval(() => {\n              this.hartCheck(this.chatInfo)\n            }, this.hart.timer * 1000)\n          } else if (data.type == 'alone') {\n            // Skip messages from system admin for user 1\n            if (data.self.id === 13 && this.me.id === 1) {\n              return\n            }\n\n            if (this.chatInfo[data.self.id]) {\n              this.chatInfo[data.self.id].msg.push({ type: 'target', text: data.content, time: data.time })\n              this.chatInfo[data.self.id].isRead = 0\n            } else {\n              // 解决无法实时刷新dom\n              this.$set(this.chatInfo, data.self.id, {\n                id: data.self.id,\n                name: data.self.nickName,\n                type: 'user',\n                time: data.time,\n                icon: data.self.icon,\n                msg: [{ type: 'target', text: data.content, time: data.time }],\n                head: null,\n                isRead: 0,\n              })\n            }\n          } else if (data.type === 'ping') {\n            this.hart.check = {}\n            if (data.content.length) {\n              let info = data.content.split('|')\n              for (let i = 0; i < info.length - 1; i++) {\n                this.hart.check[info[i]] = true\n                if (this.chatInfo[info[i]]) {\n                  this.$set(this.chatInfo[info[i]], 'online', true)\n                }\n              }\n            }\n          }\n\n          this.moeScroll()\n        }\n      }\n    },\n    moeScroll(time = 200) {\n      setTimeout(() => {\n        var container = this.$el.querySelector('.content')\n        container.scrollTop = container.scrollHeight\n      }, time)\n    },\n    getBrowserType() {\n      // 获取浏览器 userAgent\n      var ua = navigator.userAgent\n      // 是否为 Opera\n      if (ua.indexOf('Opera') > -1) {\n        return 'Opera'\n      }\n\n      // 是否为 IE\n      var isIE = ua.indexOf('compatible') > -1 && ua.indexOf('MSIE') > -1 && !isOpera\n      var isIE11 = ua.indexOf('Trident') > -1 && ua.indexOf('rv:11.0') > -1\n      // 返回结果\n      if (isIE11) {\n        return 'IE11'\n      } else if (isIE) {\n        return 'IE'\n      }\n      // 是否为 Edge\n      if (ua.indexOf('Edg') > -1) {\n        return 'Edge'\n      }\n      // 是否为 Firefox\n      if (ua.indexOf('Firefox') > -1) {\n        return 'Firefox'\n      }\n      // 是否为 Safari\n      if (ua.indexOf('Safari') > -1 && ua.indexOf('Chrome') == -1) {\n        return 'Safari'\n      }\n      // 是否为 Chrome\n      if (ua.indexOf('Chrome') > -1 && ua.indexOf('Safari') > -1 && ua.indexOf('Edge') == -1) {\n        return 'Chrome'\n      }\n      // 是否为 UC\n      if (ua.indexOf('UBrowser') > -1) {\n        return 'UC'\n      }\n      // 是否为 QQ\n      if (ua.indexOf('QQBrowser') > -1) {\n        return 'QQ'\n      }\n      // 都不是\n      return '未知设备'\n    },\n    // 封装信息体\n    packMsg(id, name, type, time, icon, msg, header = null, isRead = 0) {\n      return {\n        id: id,\n        name: name,\n        type: type,\n        time: time,\n        icon: icon == null ? this.defaultImg : icon,\n        msg: msg,\n        header: header,\n        isRead: isRead,\n      }\n    },\n    // 心跳包检测\n    hartCheck(friends) {\n      // 如果与服务器的连接断开了\n      if (this.$ws.ws.readyState === this.$ws.ws.CLOSED) {\n        this.$message.warning('聊天服务器已断开')\n        clearInterval(this.hart.timeObj)\n        // 将所有用户设为离线\n        for (let i in this.chatInfo) {\n          this.chatInfo[i]['online'] = false\n        }\n        return\n      }\n\n      let friends_list = ''\n      for (const iterator in friends) {\n        if (parseInt(iterator) > 0) {\n          if (!this.hart.check[iterator]) {\n            this.$set(friends[iterator], 'online', false)\n          }\n          friends_list += iterator + '|'\n        }\n      }\n      this.$ws.ws.send(JSON.stringify({ type: this.hart.type, friends_list }))\n    },\n  },\n  async mounted() {\n    // this.$message.closeAll();\n    // this.hartCheck(this.chatInfo);\n    this.me = store.getters.user\n    this.token_msg = {\n      id: this.me.id,\n      name: this.me.name,\n      icon: this.me.acatar,\n      msg: [],\n      header: 'null',\n      isRead: 1,\n      type: 'contact',\n      time: formatTimestamp(),\n    }\n\n    // Default AI chatbot message\n    this.chatInfo['-1'] = this.packMsg(\n      '-1',\n      '在线直聘智能机',\n      'sys',\n      formatTimestamp(),\n      require('@/assets/image/user/Cat.png'),\n      [\n        {\n          type: 'sys',\n          text:\n            \"\\\n      <div class='sys-msg'>\\\n        <h2>登录操作通知</h2>\\\n        <div class='describe'>[\" +\n            this.me.nickname +\n            \"]欢迎回来蜗牛兼职平台</div>\\\n        <div class='info'>\\\n          <div>\\\n            <span>设备/平台</span>\\\n            <span>\" +\n            this.getBrowserType() +\n            '浏览器</span>\\\n          </div>\\\n          <div>\\\n            <span>登录方式</span>\\\n            <span>普通登录</span>\\\n          </div>\\\n          <div>\\\n            <span>当前时间</span>\\\n            <span>' +\n            formatTimestamp() +\n            '</span>\\\n          </div>\\\n          <div>\\\n            <span></span>\\\n            <span>如有疑问,可以对我说噢!</span>\\\n          </div>\\\n        </div>\\\n      </div>\\\n    ',\n          time: formatTimestamp(),\n        },\n      ],\n      '登录操作通知',\n      1,\n    )\n\n    // 连接到服务器并接收消息\n    if (this.$ws.ws.readyState == 1) {\n      await this.recvMsg()\n      \n      // 只有在没有历史消息且用户不是系统管理员或ID为1的情况下才显示系统管理员对话\n      setTimeout(() => {\n        if (!this.hasHistoryMessages && this.me.id !== 1 && this.me.id !== 13) {\n          this.chatInfo['13'] = this.packMsg(\n            '13',\n            '系统管理员',\n            'alone',\n            formatTimestamp(),\n            require('@/assets/image/user/Cat.png'),\n            [{ type: 'target', text: '反馈请留言', time: formatTimestamp() }],\n            '',\n            1\n          )\n        }\n        \n        // 默认选择对话\n        if (!this.selectInfo.id) {\n          this.selectInfo = this.chatInfo['-1']\n        }\n      }, 1000); // 给服务器响应留出时间\n    }\n  },\n  beforeDestroy() {\n    clearTimeout(this.wsCtl.timer)\n    clearInterval(this.hart.timeObj)\n  },\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.ws-msg-form {\n  width: 800px;\n  height: 700px;\n\n  img {\n    user-select: none;\n    pointer-events: none;\n    border: 1px solid #ffffff;\n  }\n}\n\n.msg-content {\n  margin-left: 10px;\n  display: inline-block;\n  width: 100%;\n  height: 80%;\n  border: 1px solid rgb(143, 141, 141);\n  background-color: transparent !important;\n  border-radius: 5px;\n  overflow: hidden;\n  position: relative;\n}\n\n.msg-title {\n  position: absolute;\n  top: 0;\n  text-align: center;\n  width: 100%;\n  background-color: rgba(39, 39, 39, 0.219);\n  height: 30px;\n  line-height: 30px;\n}\n\n.msg-content .left {\n  margin-top: 30px;\n  width: 200px;\n  height: 95%;\n  border-right: 1px solid rgb(143, 141, 141);\n  overflow: auto;\n  overflow-x: hidden;\n  display: inline-block;\n\n  &::-webkit-scrollbar {\n    width: 5px;\n  }\n\n  &::-webkit-scrollbar-button {\n    display: none;\n  }\n\n  &::-webkit-scrollbar-thumb {\n    background-color: rgba(124, 124, 124, 0.438);\n    border-radius: 5px;\n  }\n\n  .item {\n    position: relative;\n    height: 78px;\n    padding-left: 20px;\n    display: flex;\n    align-items: center;\n    cursor: pointer;\n    user-select: none;\n\n    &:hover {\n      background-color: rgba(146, 146, 146, 0.3);\n    }\n\n    .icon {\n      width: 40px !important;\n      height: 40px !important;\n      border-radius: 40px;\n    }\n\n    div {\n      position: absolute;\n      top: 20px;\n      left: 65px;\n      font-size: 14px;\n    }\n\n    .msg {\n      top: 45px;\n      font-size: 12px;\n      color: rgb(114, 114, 114);\n      overflow: hidden;\n      text-overflow: ellipsis;\n      white-space: nowrap;\n      max-width: 130px;\n    }\n\n    .newTip,\n    .online {\n      display: inline-block;\n      width: 10px;\n      height: 10px;\n      background: red;\n      border-radius: 10px;\n      position: absolute;\n      left: 10px;\n      top: 20px;\n    }\n\n    .online {\n      background-color: greenyellow;\n      top: 50px;\n      left: 20px;\n    }\n\n    .chat-time {\n      display: inline-block;\n      font-size: 13px;\n      position: absolute;\n      right: 5px;\n      top: 5px;\n      opacity: 0.7;\n    }\n  }\n}\n\n.timestamp {\n  text-align: center;\n  font-size: 12px;\n  color: #999;\n  margin: 8px 0 2px 0;\n  padding: 0 5px;\n  clear: both;\n  width: 100%;\n}\n\n/* Adjust message item spacing to accommodate the timestamp */\n.msg-item {\n  width: 100%;\n  margin: 5px 0;\n  position: relative;\n  transition: all 0.5s;\n  clear: both;\n}\n\n.msg-content .right {\n  display: inline-block !important;\n  height: 94% !important;\n  width: 600px !important;\n  position: absolute !important;\n  margin-top: 30px;\n\n  .form {\n    position: relative;\n    height: 100%;\n    width: 100%;\n\n    .content {\n      height: 385px;\n      overflow: auto;\n      padding: 0 10px;\n      background-color: rgba(0, 0, 0, 0.03) !important;\n\n      &::-webkit-scrollbar {\n        overflow-y: hidden;\n      }\n\n      .msg-item {\n        width: 100%;\n        margin: 10px 0;\n        position: relative;\n        transition: all 0.5s;\n\n        > div img {\n          display: inline-block;\n          width: 35px;\n          height: 35px;\n        }\n\n        span {\n          display: inline-block;\n          background: white;\n          padding: 10px 15px;\n          font-size: 15px;\n          max-width: 350px;\n          margin: 10px 0;\n          word-break: break-word;\n        }\n\n        .tip {\n          width: 400px;\n          height: 260px;\n          border-radius: 10px;\n          background-color: white;\n          margin-left: 60px;\n        }\n\n        .sys,\n        .target {\n          float: left;\n          margin-left: 10px;\n          width: 100%;\n\n          span {\n            border-radius: 20px;\n            border-top-left-radius: 0;\n            margin-left: 35px;\n          }\n\n          img {\n            position: absolute;\n            left: 0;\n          }\n        }\n\n        .this {\n          position: relative;\n          float: right;\n          width: 100%;\n\n          span {\n            float: right;\n            background-color: rgb(128, 185, 242);\n            margin-right: 45px;\n            color: white;\n            border-radius: 20px;\n            border-top-right-radius: 0;\n          }\n\n          img {\n            position: absolute;\n            right: 0;\n          }\n        }\n\n        .birth-anim {\n          animation-name: birth;\n          animation-duration: 0.5s;\n          animation-iteration-count: 1;\n        }\n\n        // 样式穿透\n        ::v-deep .sys-msg {\n          > * {\n            margin: 15px 0;\n            color: #505050;\n            font-size: 15px;\n          }\n\n          h2 {\n            font-weight: 700;\n            font-size: 18px;\n          }\n\n          .info {\n            width: 400px;\n\n            span {\n              display: inline-block;\n              margin-bottom: 10px;\n            }\n\n            span:nth-child(1) {\n              width: 100px !important;\n              opacity: 0.7;\n            }\n          }\n        }\n\n        @keyframes birth {\n          0% {\n            transform: translatey(50px);\n          }\n\n          100% {\n            transform: translatey(0px);\n          }\n        }\n      }\n    }\n  }\n\n  .msg-footer {\n    position: relative;\n    border-top: 1px solid rgb(143, 141, 141);\n\n    textarea {\n      resize: none;\n      outline: none;\n      width: 100%;\n      height: 100px;\n      border: none;\n    }\n\n    .send {\n      position: absolute;\n      right: 10px;\n    }\n  }\n}\n\n.select-style {\n  background-color: rgba(146, 146, 146, 0.3);\n}\n\n.rou-btn {\n  margin-top: 5px;\n  display: inline-block;\n  border: 1px solid cornflowerblue;\n  color: cornflowerblue;\n  border-radius: 5px;\n  padding: 3px 5px;\n\n  &:hover {\n    border: 1px solid teal;\n    color: teal;\n  }\n}\n</style>'\n\nexport default {\n  data() {\n    return {\n      me: null,\n      inputRedis: {}, // 输入的内容缓存\n      defaultImg: require('@/assets/image/user/user.png'),\n      selectInfo: {\n        id: 0,\n        msg: [],\n      },\n      chatInfo: {},\n      hasHistoryMessages: false, // 标记是否有历史消息\n      target_info: [],\n      token_msg: {},\n      wsCtl: {\n        allow: true,\n        timer: null,\n      },\n      hart: {\n        timer: 5, // 每隔一段时间监听一次在线客户端 /s\n        type: 'ping',\n        timeObj: null,\n        check: {}, // 当客户端离线之后,第一次离线的加入对象内, 如果第二次还是离线,那么将目标用户标志为离线,避免重复闪烁\n      },\n    }\n  },\n  methods: {\n    // 使用导入的格式化方法\n    formatMessageTime,\n    formatSidebarTime,\n    \n    // 判断是否应该显示时间戳\n    shouldShowTimestamp(index) {\n      return shouldShowTimestamp(index, this.selectInfo.msg);\n    },\n    \n    clickChat(item) {\n      // console.log(\"item?\",item);\n      this.selectInfo = item\n      if (!item.isRead) {\n        this.$ws.ws.send(JSON.stringify({ type: 'state', readID: this.selectInfo.id }))\n        item.isRead = 1\n      }\n      this.moeScroll(10)\n    },\n    sendMsg() {\n      if (!this.wsCtl.allow) {\n        return\n      }\n      if (this.$ws.ws.readyState != 1) {\n        return this.$message.warning('暂时无法发送信息, 您与服务器的连接已断开.')\n      }\n      if (!this.inputRedis[this.selectInfo.id]) return\n      let inputMsg = this.inputRedis[this.selectInfo.id].slice(0, 500) // 限制字数\n      this.inputRedis[this.selectInfo.id] = '' // 清空输入框\n\n      // 使用格式化的时间戳\n      const timestamp = formatTimestamp()\n      this.selectInfo.msg.push({ type: 'this', text: inputMsg, time: timestamp })\n\n      this.wsCtl.timer = setTimeout(() => {\n        this.wsCtl.allow = true\n        clearTimeout(this.wsCtl.timer)\n        this.wsCtl.timer = null\n      }, 1000)\n\n      try {\n        this.$ws.ws.send(\n          JSON.stringify({\n            self: {\n              name: this.me.nickname,\n              icon: JSON.stringify(this.me.avatar).length > 100 ? 'null' : this.me.avatar,\n              id: this.me.id,\n            },\n            target: {\n              id: this.selectInfo.id,\n              name: this.selectInfo.name,\n              icon: JSON.stringify(this.selectInfo.icon).length > 100 ? 'null' : this.selectInfo.icon,\n            },\n            time: timestamp,\n            type: 'alone',\n            content: inputMsg,\n            recvID: this.selectInfo.id,\n          }),\n        )\n        this.moeScroll()\n      } catch (e) {\n        this.selectInfo.msg.push({\n          type: 'this',\n          text: '(发送失败)' + this.inputRedis[this.selectInfo.id],\n          time: timestamp,\n        })\n      }\n    },\n    recvMsg() {\n      if (this.$ws.ws) {\n        // 机器人默认在线,除非用户断开了与后台的连接\n        this.chatInfo['-1']['online'] = true\n        let msgInfo = { type: 'token', _id: this.me.id }\n        this.$ws.ws.send(JSON.stringify(msgInfo))\n\n        this.$ws.ws.onmessage = async res => {\n          let data = JSON.parse(res.data)\n          // console.log(\"res:\", data);\n          // 捕获系统消息并跳出\n          if (data.type == 'system') {\n            // 将匹配的内容结果传递给api,\n            let info = await Application.getMsg(Utils.filterStr(data.content))\n            this.chatInfo['-1'].msg.push({ type: 'sys', text: info.data, time: data.time })\n            this.moeScroll()\n            return\n          }\n\n          if (data.type == 'token') {\n            const info = {}\n            \n            // 检查是否有历史消息\n            if (data.content && data.content.length > 0) {\n              this.hasHistoryMessages = true\n            }\n\n            for (let i in data.content) {\n              let cls = data.content[i].recvId == this.me.id ? 'target' : 'this'\n              // 如果信息列表没有这个用户的数据\n              let keyID = data.content[i].sendId\n\n              if (info[keyID] == null) {\n                let name = JSON.parse(data.content[i].self).name\n                let icon = JSON.parse(data.content[i].self).icon\n                // 如果发送者的id是当前用户, 那么将写入数据的key修改为接收者的key\n                if (parseInt(this.me.id) == parseInt(keyID)) {\n                  keyID = data.content[i].recvId\n                  name = JSON.parse(data.content[i].target).name\n                  icon = JSON.parse(data.content[i].target).icon\n                }\n\n                // Skip system admin messages for user 1\n                if (keyID === '13' && this.me.id === 1) {\n                  continue\n                }\n\n                info[keyID] = keyID\n                let msg = [{ type: cls, text: data.content[i].content, time: data.content[i].timestamp }]\n\n                if (this.chatInfo[keyID] && this.chatInfo[keyID]['msg']) {\n                  // If we already have a chat with this ID and it has a message array, add to it\n                  this.chatInfo[keyID]['msg'].push(msg[0])\n                } else {\n                  // Otherwise create a new chat entry\n                  this.$set(\n                    this.chatInfo,\n                    keyID,\n                    this.packMsg(keyID, name, 'alone', data.content[i].time, icon, msg, 'null', 0),\n                  )\n                }\n              } else {\n                // If we've seen this user before in this data set, just add the message\n                if (keyID === '13' && this.me.id === 1) {\n                  // Skip system admin messages for user 1\n                  continue\n                }\n                this.chatInfo[keyID]['msg'].push({\n                  type: cls,\n                  text: data.content[i].content,\n                  time: data.content[i].timestamp,\n                })\n              }\n\n              this.chatInfo[keyID].isRead = data.readList.indexOf('^' + keyID + '&') != -1 ? 0 : 1\n            }\n\n            // If we're user 1, ensure system admin chat is removed\n            if (this.me.id === 1 && this.chatInfo['13']) {\n              delete this.chatInfo['13']\n            }\n\n            if (data.ContactID != -1) {\n              this.selectInfo = this.chatInfo[data.ContactID]\n              this.selectInfo.isRead = 1\n            } else {\n              let readList = data.readList\n                .replace(/&/g, '')\n                .split('^')\n                .filter(item => item != '')\n              if (readList.length) {\n                this.selectInfo = this.chatInfo[readList[0]]\n                if (this.selectInfo && !this.selectInfo.isRead) {\n                  this.$ws.ws.send(JSON.stringify({ type: 'state', readID: this.selectInfo.id }))\n                  this.selectInfo.isRead = 1\n                }\n              }\n            }\n\n            // 心跳包\n            this.hartCheck(this.chatInfo)\n            this.hart.timeObj = setInterval(() => {\n              this.hartCheck(this.chatInfo)\n            }, this.hart.timer * 1000)\n          } else if (data.type == 'alone') {\n            // Skip messages from system admin for user 1\n            if (data.self.id === 13 && this.me.id === 1) {\n              return\n            }\n\n            if (this.chatInfo[data.self.id]) {\n              this.chatInfo[data.self.id].msg.push({ type: 'target', text: data.content, time: data.time })\n              this.chatInfo[data.self.id].isRead = 0\n            } else {\n              // 解决无法实时刷新dom\n              this.$set(this.chatInfo, data.self.id, {\n                id: data.self.id,\n                name: data.self.nickName,\n                type: 'user',\n                time: data.time,\n                icon: data.self.icon,\n                msg: [{ type: 'target', text: data.content, time: data.time }],\n                head: null,\n                isRead: 0,\n              })\n            }\n          } else if (data.type === 'ping') {\n            this.hart.check = {}\n            if (data.content.length) {\n              let info = data.content.split('|')\n              for (let i = 0; i < info.length - 1; i++) {\n                this.hart.check[info[i]] = true\n                if (this.chatInfo[info[i]]) {\n                  this.$set(this.chatInfo[info[i]], 'online', true)\n                }\n              }\n            }\n          }\n\n          this.moeScroll()\n        }\n      }\n    },\n    moeScroll(time = 200) {\n      setTimeout(() => {\n        var container = this.$el.querySelector('.content')\n        container.scrollTop = container.scrollHeight\n      }, time)\n    },\n    getBrowserType() {\n      // 获取浏览器 userAgent\n      var ua = navigator.userAgent\n      // 是否为 Opera\n      if (ua.indexOf('Opera') > -1) {\n        return 'Opera'\n      }\n\n      // 是否为 IE\n      var isIE = ua.indexOf('compatible') > -1 && ua.indexOf('MSIE') > -1 && !isOpera\n      var isIE11 = ua.indexOf('Trident') > -1 && ua.indexOf('rv:11.0') > -1\n      // 返回结果\n      if (isIE11) {\n        return 'IE11'\n      } else if (isIE) {\n        return 'IE'\n      }\n      // 是否为 Edge\n      if (ua.indexOf('Edg') > -1) {\n        return 'Edge'\n      }\n      // 是否为 Firefox\n      if (ua.indexOf('Firefox') > -1) {\n        return 'Firefox'\n      }\n      // 是否为 Safari\n      if (ua.indexOf('Safari') > -1 && ua.indexOf('Chrome') == -1) {\n        return 'Safari'\n      }\n      // 是否为 Chrome\n      if (ua.indexOf('Chrome') > -1 && ua.indexOf('Safari') > -1 && ua.indexOf('Edge') == -1) {\n        return 'Chrome'\n      }\n      // 是否为 UC\n      if (ua.indexOf('UBrowser') > -1) {\n        return 'UC'\n      }\n      // 是否为 QQ\n      if (ua.indexOf('QQBrowser') > -1) {\n        return 'QQ'\n      }\n      // 都不是\n      return '未知设备'\n    },\n    // 封装信息体\n    packMsg(id, name, type, time, icon, msg, header = null, isRead = 0) {\n      return {\n        id: id,\n        name: name,\n        type: type,\n        time: time,\n        icon: icon == null ? this.defaultImg : icon,\n        msg: msg,\n        header: header,\n        isRead: isRead,\n      }\n    },\n    // 心跳包检测\n    hartCheck(friends) {\n      // 如果与服务器的连接断开了\n      if (this.$ws.ws.readyState === this.$ws.ws.CLOSED) {\n        this.$message.warning('聊天服务器已断开')\n        clearInterval(this.hart.timeObj)\n        // 将所有用户设为离线\n        for (let i in this.chatInfo) {\n          this.chatInfo[i]['online'] = false\n        }\n        return\n      }\n\n      let friends_list = ''\n      for (const iterator in friends) {\n        if (parseInt(iterator) > 0) {\n          if (!this.hart.check[iterator]) {\n            this.$set(friends[iterator], 'online', false)\n          }\n          friends_list += iterator + '|'\n        }\n      }\n      this.$ws.ws.send(JSON.stringify({ type: this.hart.type, friends_list }))\n    },\n  },\n  async mounted() {\n    // this.$message.closeAll();\n    // this.hartCheck(this.chatInfo);\n    this.me = store.getters.user\n    this.token_msg = {\n      id: this.me.id,\n      name: this.me.name,\n      icon: this.me.acatar,\n      msg: [],\n      header: 'null',\n      isRead: 1,\n      type: 'contact',\n      time: formatTimestamp(),\n    }\n\n    // Default AI chatbot message\n    this.chatInfo['-1'] = this.packMsg(\n      '-1',\n      '在线直聘智能机',\n      'sys',\n      formatTimestamp(),\n      require('@/assets/image/user/Cat.png'),\n      [\n        {\n          type: 'sys',\n          text:\n            \"\\\n      <div class='sys-msg'>\\\n        <h2>登录操作通知</h2>\\\n        <div class='describe'>[\" +\n            this.me.nickname +\n            \"]欢迎回来蜗牛兼职平台</div>\\\n        <div class='info'>\\\n          <div>\\\n            <span>设备/平台</span>\\\n            <span>\" +\n            this.getBrowserType() +\n            '浏览器</span>\\\n          </div>\\\n          <div>\\\n            <span>登录方式</span>\\\n            <span>普通登录</span>\\\n          </div>\\\n          <div>\\\n            <span>当前时间</span>\\\n            <span>' +\n            formatTimestamp() +\n            '</span>\\\n          </div>\\\n          <div>\\\n            <span></span>\\\n            <span>如有疑问,可以对我说噢!</span>\\\n          </div>\\\n        </div>\\\n      </div>\\\n    ',\n          time: formatTimestamp(),\n        },\n      ],\n      '登录操作通知',\n      1,\n    )\n\n    // 连接到服务器并接收消息\n    if (this.$ws.ws.readyState == 1) {\n      await this.recvMsg()\n      \n      // 只有在没有历史消息且用户不是系统管理员或ID为1的情况下才显示系统管理员对话\n      setTimeout(() => {\n        if (!this.hasHistoryMessages && this.me.id !== 1 && this.me.id !== 13) {\n          this.chatInfo['13'] = this.packMsg(\n            '13',\n            '系统管理员',\n            'alone',\n            formatTimestamp(),\n            require('@/assets/image/user/Cat.png'),\n            [{ type: 'target', text: '反馈请留言', time: formatTimestamp() }],\n            '',\n            1\n          )\n        }\n        \n        // 默认选择对话\n        if (!this.selectInfo.id) {\n          this.selectInfo = this.chatInfo['-1']\n        }\n      }, 1000); // 给服务器响应留出时间\n    }\n  },\n  beforeDestroy() {\n    clearTimeout(this.wsCtl.timer)\n    clearInterval(this.hart.timeObj)\n  },\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.ws-msg-form {\n  width: 800px;\n  height: 700px;\n\n  img {\n    user-select: none;\n    pointer-events: none;\n    border: 1px solid #ffffff;\n  }\n}\n\n.msg-content {\n  margin-left: 10px;\n  display: inline-block;\n  width: 100%;\n  height: 80%;\n  border: 1px solid rgb(143, 141, 141);\n  background-color: transparent !important;\n  border-radius: 5px;\n  overflow: hidden;\n  position: relative;\n}\n\n.msg-title {\n  position: absolute;\n  top: 0;\n  text-align: center;\n  width: 100%;\n  background-color: rgba(39, 39, 39, 0.219);\n  height: 30px;\n  line-height: 30px;\n}\n\n.msg-content .left {\n  margin-top: 30px;\n  width: 200px;\n  height: 95%;\n  border-right: 1px solid rgb(143, 141, 141);\n  overflow: auto;\n  overflow-x: hidden;\n  display: inline-block;\n\n  &::-webkit-scrollbar {\n    width: 5px;\n  }\n\n  &::-webkit-scrollbar-button {\n    display: none;\n  }\n\n  &::-webkit-scrollbar-thumb {\n    background-color: rgba(124, 124, 124, 0.438);\n    border-radius: 5px;\n  }\n\n  .item {\n    position: relative;\n    height: 78px;\n    padding-left: 20px;\n    display: flex;\n    align-items: center;\n    cursor: pointer;\n    user-select: none;\n\n    &:hover {\n      background-color: rgba(146, 146, 146, 0.3);\n    }\n\n    .icon {\n      width: 40px !important;\n      height: 40px !important;\n      border-radius: 40px;\n    }\n\n    div {\n      position: absolute;\n      top: 20px;\n      left: 65px;\n      font-size: 14px;\n    }\n\n    .msg {\n      top: 45px;\n      font-size: 12px;\n      color: rgb(114, 114, 114);\n      overflow: hidden;\n      text-overflow: ellipsis;\n      white-space: nowrap;\n      max-width: 130px;\n    }\n\n    .newTip,\n    .online {\n      display: inline-block;\n      width: 10px;\n      height: 10px;\n      background: red;\n      border-radius: 10px;\n      position: absolute;\n      left: 10px;\n      top: 20px;\n    }\n\n    .online {\n      background-color: greenyellow;\n      top: 50px;\n      left: 20px;\n    }\n\n    .chat-time {\n      display: inline-block;\n      font-size: 13px;\n      position: absolute;\n      right: 5px;\n      top: 5px;\n      opacity: 0.7;\n    }\n  }\n}\n\n.timestamp {\n  text-align: center;\n  font-size: 12px;\n  color: #999;\n  margin: 8px 0 2px 0;\n  padding: 0 5px;\n  clear: both;\n  width: 100%;\n}\n\n/* Adjust message item spacing to accommodate the timestamp */\n.msg-item {\n  width: 100%;\n  margin: 5px 0;\n  position: relative;\n  transition: all 0.5s;\n  clear: both;\n}\n\n.msg-content .right {\n  display: inline-block !important;\n  height: 94% !important;\n  width: 600px !important;\n  position: absolute !important;\n  margin-top: 30px;\n\n  .form {\n    position: relative;\n    height: 100%;\n    width: 100%;\n\n    .content {\n      height: 385px;\n      overflow: auto;\n      padding: 0 10px;\n      background-color: rgba(0, 0, 0, 0.03) !important;\n\n      &::-webkit-scrollbar {\n        overflow-y: hidden;\n      }\n\n      .msg-item {\n        width: 100%;\n        margin: 10px 0;\n        position: relative;\n        transition: all 0.5s;\n\n        > div img {\n          display: inline-block;\n          width: 35px;\n          height: 35px;\n        }\n\n        span {\n          display: inline-block;\n          background: white;\n          padding: 10px 15px;\n          font-size: 15px;\n          max-width: 350px;\n          margin: 10px 0;\n          word-break: break-word;\n        }\n\n        .tip {\n          width: 400px;\n          height: 260px;\n          border-radius: 10px;\n          background-color: white;\n          margin-left: 60px;\n        }\n\n        .sys,\n        .target {\n          float: left;\n          margin-left: 10px;\n          width: 100%;\n\n          span {\n            border-radius: 20px;\n            border-top-left-radius: 0;\n            margin-left: 35px;\n          }\n\n          img {\n            position: absolute;\n            left: 0;\n          }\n        }\n\n        .this {\n          position: relative;\n          float: right;\n          width: 100%;\n\n          span {\n            float: right;\n            background-color: rgb(128, 185, 242);\n            margin-right: 45px;\n            color: white;\n            border-radius: 20px;\n            border-top-right-radius: 0;\n          }\n\n          img {\n            position: absolute;\n            right: 0;\n          }\n        }\n\n        .birth-anim {\n          animation-name: birth;\n          animation-duration: 0.5s;\n          animation-iteration-count: 1;\n        }\n\n        // 样式穿透\n        ::v-deep .sys-msg {\n          > * {\n            margin: 15px 0;\n            color: #505050;\n            font-size: 15px;\n          }\n\n          h2 {\n            font-weight: 700;\n            font-size: 18px;\n          }\n\n          .info {\n            width: 400px;\n\n            span {\n              display: inline-block;\n              margin-bottom: 10px;\n            }\n\n            span:nth-child(1) {\n              width: 100px !important;\n              opacity: 0.7;\n            }\n          }\n        }\n\n        @keyframes birth {\n          0% {\n            transform: translatey(50px);\n          }\n\n          100% {\n            transform: translatey(0px);\n          }\n        }\n      }\n    }\n  }\n\n  .msg-footer {\n    position: relative;\n    border-top: 1px solid rgb(143, 141, 141);\n\n    textarea {\n      resize: none;\n      outline: none;\n      width: 100%;\n      height: 100px;\n      border: none;\n    }\n\n    .send {\n      position: absolute;\n      right: 10px;\n    }\n  }\n}\n\n.select-style {\n  background-color: rgba(146, 146, 146, 0.3);\n}\n\n.rou-btn {\n  margin-top: 5px;\n  display: inline-block;\n  border: 1px solid cornflowerblue;\n  color: cornflowerblue;\n  border-radius: 5px;\n  padding: 3px 5px;\n\n  &:hover {\n    border: 1px solid teal;\n    color: teal;\n  }\n}\n</style>"]}]}