{"remainingRequest":"D:\\001JavaTools\\001Java项目\\招聘系统\\recruit-system\\recruit-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\001JavaTools\\001Java项目\\招聘系统\\recruit-system\\recruit-web\\src\\view\\admin\\user\\user-info.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\001JavaTools\\001Java项目\\招聘系统\\recruit-system\\recruit-web\\src\\view\\admin\\user\\user-info.vue","mtime":1743503540718},{"path":"D:\\001JavaTools\\001Java项目\\招聘系统\\recruit-system\\recruit-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\001JavaTools\\001Java项目\\招聘系统\\recruit-system\\recruit-web\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\001JavaTools\\001Java项目\\招聘系统\\recruit-system\\recruit-web\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\001JavaTools\\001Java项目\\招聘系统\\recruit-system\\recruit-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\001JavaTools\\001Java项目\\招聘系统\\recruit-system\\recruit-web\\node_modules\\vue-loader\\lib\\index.js","mtime":1655715099000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Admin from '@/lin/model/admin'\nimport User from '@/lin/model/user'\n\nexport default {\n  props: {\n    submit: {\n      type: Boolean, // 表单是否显示功能按钮\n      default: true,\n    },\n    id: {\n      // 用户id\n      type: Number,\n      default: undefined,\n    },\n    groups: {\n      // 所有分组\n      type: Array,\n      default: () => [],\n    },\n    labelPosition: {\n      // 表单label位置\n      type: String,\n      default: 'right',\n    },\n    info: {\n      // 用户信息\n      type: Object,\n      default: () => ({}),\n    },\n    pageType: {\n      type: String,\n      default: 'add', // 区分编辑页面/添加页面\n    },\n  },\n  inject: ['eventBus'],\n  computed: {\n    filteredGroups() {\n      // 如果用户组ID是1或5，显示所有角色\n      if (this.userGroupId === 1 || this.userGroupId === 5) {\n        return this.groups;\n      }\n      \n      // 否则过滤掉ID为5的角色\n      return this.groups.filter(group => group.id !== 5);\n    }\n  },\n  \n  data() {\n    // 验证回调函数\n    const checkUserName = (rule, value, callback) => {\n      // eslint-disable-line\n      if (!value) {\n        callback(new Error('用户名不能为空'))\n      }\n      callback()\n    }\n    const validatePassword = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error('请输入密码'))\n      } else if (value.length < 6) {\n        callback(new Error('密码长度不能少于6位数'))\n      } else {\n        if (this.form.checkPassword !== '') {\n          this.$refs.form.validateField('confirm_password')\n        }\n        callback()\n      }\n    }\n    const validatePassword2 = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error('请再次输入密码'))\n      } else if (value !== this.form.password) {\n        callback(new Error('两次输入密码不一致!'))\n      } else {\n        callback()\n      }\n    }\n    return {\n      loading: false, // 加载动画\n      isEdited: false, // 能否编辑\n      form: {\n        username: '',\n        password: '',\n        tel: '',\n        confirm_password: '',\n        email: '',\n        nickname: '',\n        group_ids: [],\n      },\n      userGroupId: null, // 当前用户的组ID\n      // 验证规则\n      rules: {\n        nickname: [\n          {\n            trigger: ['blur', 'change'],\n            required: true,\n          },\n        ],\n        tel: [\n          {\n            trigger: ['blur', 'change'],\n            required: true,\n          },\n        ],\n        username: [\n          {\n            validator: checkUserName,\n            trigger: ['blur', 'change'],\n            required: true,\n          },\n        ],\n        password: [{ validator: validatePassword, trigger: 'blur', required: true }],\n        confirm_password: [{ validator: validatePassword2, trigger: 'blur', required: true }],\n        email: [\n          {\n            type: 'email',\n            message: '请输入正确的邮箱地址或者不填',\n            trigger: ['blur', 'change'],\n          },\n        ],\n      },\n    }\n  },\n  methods: {\n    // 获取当前用户的组ID\n    async fetchUserGroup() {\n      try {\n        const res = await User.getGroup();\n        this.userGroupId = res; \n      } catch (error) {\n        console.error('获取用户组信息失败', error);\n      }\n    },\n    \n    // 提交表单\n    async submitForm(formName) {\n      this.$refs[formName].validate(async valid => {\n        // eslint-disable-line\n        if (valid) {\n          // 新增用户\n          let res\n          if (this.pageType === 'add') {\n            try {\n              this.loading = true\n              res = await User.register(this.form)\n              if (res.code < window.MAX_SUCCESS_CODE) {\n                this.loading = false\n                this.$message.success(`${res.message}`)\n                this.eventBus.$emit('addUser', true)\n                this.resetForm(formName)\n              }\n            } catch (e) {\n              this.loading = false\n              if (e.data.code === 10073) {\n                this.$message.error(e.data.message)\n              } else {\n                this.$message.error('新增用户失败')\n              }\n              console.log(e)\n            }\n          } else {\n            // 更新用户信息\n            if (\n              this.form.email === this.info.email\n              && this.form.group_ids.sort().toString() === this.info.group_ids.sort().toString()\n            ) {\n              this.$emit('handleInfoResult', false)\n              return\n            }\n            try {\n              if (!this.form.group_ids.length) {\n                this.$message.error('至少选择一个角色')\n                return\n              }\n              this.loading = true\n              res = await Admin.updateOneUser(this.form.email, this.form.group_ids, this.id)\n            } catch (e) {\n              this.loading = false\n              console.log(e)\n            }\n            if (res.code < window.MAX_SUCCESS_CODE) {\n              this.loading = false\n              this.$message.success(`${res.message}`)\n              this.$emit('handleInfoResult', true)\n            } else {\n              this.loading = false\n              this.$message.error(`${res.message}`)\n            }\n          }\n        } else {\n          console.log('error submit!!')\n          this.$message.error('请填写正确的信息')\n        }\n      })\n    },\n    \n    // 重置表单\n    resetForm(formName) {\n      if (this.pageType === 'edit') {\n        this.setInfo()\n      } else {\n        this.form.group_ids = []\n        this.$refs[formName].resetFields()\n      }\n    },\n    \n    // 设置用户信息\n    setInfo() {\n      this.form.username = this.info.username\n      this.form.email = this.info.email\n      this.form.tel = this.info.tel\n      const temp = []\n      this.info.group_ids.forEach(item => {\n        temp.push(item.id)\n      })\n      this.form.group_ids = temp\n    },\n  },\n  \n  // 生命周期=\n  async created() {\n    // 获取当前用户组信息\n    await this.fetchUserGroup();\n    \n    // 根据页面类型初始化\n    if (this.pageType === 'edit') {\n      this.setInfo()\n      this.isEdited = true\n    }\n  }\n}\n",null]}