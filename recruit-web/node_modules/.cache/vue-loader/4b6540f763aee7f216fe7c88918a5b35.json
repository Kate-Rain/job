{"remainingRequest":"D:\\001JavaTools\\001Java项目\\招聘系统\\recruit-system\\recruit-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\001JavaTools\\001Java项目\\招聘系统\\recruit-system\\recruit-web\\src\\view\\about\\msg.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\001JavaTools\\001Java项目\\招聘系统\\recruit-system\\recruit-web\\src\\view\\about\\msg.vue","mtime":1743843682355},{"path":"D:\\001JavaTools\\001Java项目\\招聘系统\\recruit-system\\recruit-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\001JavaTools\\001Java项目\\招聘系统\\recruit-system\\recruit-web\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\001JavaTools\\001Java项目\\招聘系统\\recruit-system\\recruit-web\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\001JavaTools\\001Java项目\\招聘系统\\recruit-system\\recruit-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\001JavaTools\\001Java项目\\招聘系统\\recruit-system\\recruit-web\\node_modules\\vue-loader\\lib\\index.js","mtime":1655715099000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { Application } from '@/model/application'\nimport Utils from '@/lin/util/util'\nimport store from '@/store'\nimport { formatMessageTime, formatSidebarTime, shouldShowTimestamp, formatTimestamp } from '@/lin/util/time-formatter'\n\nexport default {\n  data() {\n    return {\n      me: null,\n      inputRedis: {}, // 输入的内容缓存\n      defaultImg: require('@/assets/image/user/user.png'),\n      selectInfo: {\n        id: 0,\n        msg: [],\n      },\n      chatInfo: {},\n      hasHistoryMessages: false, // 标记是否有历史消息\n      hasSystemAdminMessage: false, // 标记是否有系统管理员的历史消息\n      target_info: [],\n      token_msg: {},\n      wsCtl: {\n        allow: true,\n        timer: null,\n      },\n      hart: {\n        timer: 5, // 每隔一段时间监听一次在线客户端 /s\n        type: 'ping',\n        timeObj: null,\n        check: {}, // 当客户端离线之后,第一次离线的加入对象内, 如果第二次还是离线,那么将目标用户标志为离线,避免重复闪烁\n      },\n      isLoading: false, // 用于标记消息是否正在加载中\n    }\n  },\n  methods: {\n    // 使用导入的格式化方法\n    formatMessageTime,\n    formatSidebarTime,\n    \n    // 判断是否应该显示时间戳\n    shouldShowTimestamp(index) {\n      return shouldShowTimestamp(index, this.selectInfo.msg);\n    },\n    \n    clickChat(item) {\n      // 如果当前正在加载中，不允许切换对话\n      if (this.isLoading) return;\n      \n      this.selectInfo = item\n      if (!item.isRead) {\n        this.$ws.ws.send(JSON.stringify({ type: 'state', readID: this.selectInfo.id }))\n        item.isRead = 1\n      }\n      this.moeScroll(10)\n    },\n    sendMsg() {\n      if (!this.wsCtl.allow) {\n        return\n      }\n      if (this.$ws.ws.readyState != 1) {\n        return this.$message.warning('暂时无法发送信息, 您与服务器的连接已断开.')\n      }\n      if (!this.inputRedis[this.selectInfo.id]) return\n      let inputMsg = this.inputRedis[this.selectInfo.id].slice(0, 500) // 限制字数\n      this.inputRedis[this.selectInfo.id] = '' // 清空输入框\n\n      // 使用格式化的时间戳\n      const timestamp = formatTimestamp()\n      this.selectInfo.msg.push({ type: 'this', text: inputMsg, time: timestamp })\n\n      this.wsCtl.timer = setTimeout(() => {\n        this.wsCtl.allow = true\n        clearTimeout(this.wsCtl.timer)\n        this.wsCtl.timer = null\n      }, 1000)\n\n      try {\n        this.$ws.ws.send(\n          JSON.stringify({\n            self: {\n              name: this.me.nickname,\n              icon: JSON.stringify(this.me.avatar).length > 100 ? 'null' : this.me.avatar,\n              id: this.me.id,\n            },\n            target: {\n              id: this.selectInfo.id,\n              name: this.selectInfo.name,\n              icon: JSON.stringify(this.selectInfo.icon).length > 100 ? 'null' : this.selectInfo.icon,\n            },\n            time: timestamp,\n            type: 'alone',\n            content: inputMsg,\n            recvID: this.selectInfo.id,\n          }),\n        )\n        this.moeScroll()\n      } catch (e) {\n        this.selectInfo.msg.push({\n          type: 'this',\n          text: '(发送失败)' + this.inputRedis[this.selectInfo.id],\n          time: timestamp,\n        })\n      }\n    },\n    async recvMsg() {\n      if (this.$ws.ws) {\n        this.isLoading = true; // 开始加载消息\n        \n        try {\n          // 机器人默认在线,除非用户断开了与后台的连接\n          this.chatInfo['-1']['online'] = true\n          let msgInfo = { type: 'token', _id: this.me.id }\n          this.$ws.ws.send(JSON.stringify(msgInfo))\n\n          this.$ws.ws.onmessage = async res => {\n            let data = JSON.parse(res.data)\n            \n            // 捕获系统消息并跳出\n            if (data.type == 'system') {\n              // 将匹配的内容结果传递给api,\n              let info = await Application.getMsg(Utils.filterStr(data.content))\n              this.chatInfo['-1'].msg.push({ type: 'sys', text: info.data, time: data.time })\n              this.moeScroll()\n              return\n            }\n\n            if (data.type == 'token') {\n              const info = {}\n              \n              // 检查是否有历史消息\n              if (data.content && data.content.length > 0) {\n                this.hasHistoryMessages = true\n                \n                // 预处理数据以提高效率\n                const historyMessages = this.preprocessHistoryData(data.content);\n                \n                // 检查是否有与系统管理员(ID=13)的历史消息\n                this.hasSystemAdminMessage = historyMessages.some(\n                  msg => msg.sendId === '13' || msg.recvId === '13'\n                );\n                \n                // 批量处理历史消息\n                this.processHistoryMessages(historyMessages, data.readList);\n              }\n\n              // 如果有联系人ID，设置选中对话\n              if (data.ContactID != -1) {\n                this.selectInfo = this.chatInfo[data.ContactID]\n                this.selectInfo.isRead = 1\n              } else {\n                let readList = data.readList\n                  .replace(/&/g, '')\n                  .split('^')\n                  .filter(item => item != '')\n                if (readList.length) {\n                  this.selectInfo = this.chatInfo[readList[0]]\n                  if (this.selectInfo && !this.selectInfo.isRead) {\n                    this.$ws.ws.send(JSON.stringify({ type: 'state', readID: this.selectInfo.id }))\n                    this.selectInfo.isRead = 1\n                  }\n                }\n              }\n\n              // 添加系统管理员对话（如果需要）\n              this.addSystemAdminChat();\n              \n              // 默认选择对话\n              if (!this.selectInfo.id) {\n                this.selectInfo = this.chatInfo['-1']\n              }\n\n              // 心跳包\n              this.hartCheck(this.chatInfo)\n              this.hart.timeObj = setInterval(() => {\n                this.hartCheck(this.chatInfo)\n              }, this.hart.timer * 1000)\n              \n              this.isLoading = false; // 加载完成\n            } else if (data.type == 'alone') {\n              // Skip messages from system admin for user 1\n              if (data.self.id === 13 && this.me.id === 1) {\n                return\n              }\n\n              if (this.chatInfo[data.self.id]) {\n                this.chatInfo[data.self.id].msg.push({ type: 'target', text: data.content, time: data.time })\n                this.chatInfo[data.self.id].isRead = 0\n              } else {\n                // 解决无法实时刷新dom\n                this.$set(this.chatInfo, data.self.id, {\n                  id: data.self.id,\n                  name: data.self.nickName,\n                  type: 'user',\n                  time: data.time,\n                  icon: data.self.icon,\n                  msg: [{ type: 'target', text: data.content, time: data.time }],\n                  head: null,\n                  isRead: 0,\n                })\n              }\n            } else if (data.type === 'ping') {\n              this.hart.check = {}\n              if (data.content.length) {\n                let info = data.content.split('|')\n                for (let i = 0; i < info.length - 1; i++) {\n                  this.hart.check[info[i]] = true\n                  if (this.chatInfo[info[i]]) {\n                    this.$set(this.chatInfo[info[i]], 'online', true)\n                  }\n                }\n              }\n            }\n\n            this.moeScroll()\n          }\n        } catch (error) {\n          console.error('接收消息时发生错误:', error);\n          this.isLoading = false; // 确保在出错时也能重置加载状态\n        }\n      }\n    },\n    // 预处理历史数据以提高性能\n    preprocessHistoryData(content) {\n      // 深拷贝避免影响原始数据\n      return JSON.parse(JSON.stringify(content));\n    },\n    // 批量处理历史消息\n    processHistoryMessages(messages, readList) {\n      // 优化：使用Map存储聊天信息，提高查找效率\n      const chatMap = new Map();\n      \n      messages.forEach(item => {\n        let cls = item.recvId == this.me.id ? 'target' : 'this'\n        // 如果信息列表没有这个用户的数据\n        let keyID = item.sendId\n\n        // 如果发送者的id是当前用户, 那么将写入数据的key修改为接收者的key\n        if (parseInt(this.me.id) == parseInt(keyID)) {\n          keyID = item.recvId\n        }\n\n        // 跳过系统管理员消息（对用户ID为1的用户）\n        if (keyID === '13' && this.me.id === 1) {\n          return;\n        }\n\n        if (!chatMap.has(keyID)) {\n          let name, icon;\n          \n          if (parseInt(this.me.id) == parseInt(item.sendId)) {\n            name = JSON.parse(item.target).name;\n            icon = JSON.parse(item.target).icon;\n          } else {\n            name = JSON.parse(item.self).name;\n            icon = JSON.parse(item.self).icon;\n          }\n          \n          chatMap.set(keyID, {\n            messages: [],\n            name: name,\n            icon: icon\n          });\n        }\n        \n        chatMap.get(keyID).messages.push({\n          type: cls, \n          text: item.content, \n          time: item.timestamp\n        });\n      });\n      \n      // 更新到Vue实例\n      chatMap.forEach((value, keyID) => {\n        if (this.chatInfo[keyID] && this.chatInfo[keyID]['msg']) {\n          // 已存在的对话，追加消息\n          value.messages.forEach(msg => {\n            this.chatInfo[keyID]['msg'].push(msg);\n          });\n        } else {\n          // 新建对话\n          this.$set(\n            this.chatInfo,\n            keyID,\n            this.packMsg(\n              keyID, \n              value.name, \n              'alone', \n              value.messages[value.messages.length - 1].time, \n              value.icon, \n              value.messages, \n              'null', \n              readList.indexOf('^' + keyID + '&') != -1 ? 0 : 1\n            )\n          );\n        }\n      });\n      \n      // 如果是用户1，删除系统管理员聊天\n      if (this.me.id === 1 && this.chatInfo['13']) {\n        delete this.chatInfo['13'];\n      }\n    },\n    // 添加系统管理员对话（如果需要）\n    addSystemAdminChat() {\n      // 只有在以下条件下才添加系统管理员对话：\n      // 1. 用户不是系统管理员或ID为1\n      // 2. 没有与系统管理员的历史消息\n      // 3. 没有历史消息或明确需要添加系统管理员对话\n      if (!this.hasSystemAdminMessage && this.me.id !== 1 && this.me.id !== 13) {\n        this.chatInfo['13'] = this.packMsg(\n          '13',\n          '系统管理员',\n          'alone',\n          formatTimestamp(),\n          require('@/assets/image/user/Cat.png'),\n          [{ type: 'target', text: '反馈请留言', time: formatTimestamp() }],\n          '',\n          1\n        );\n      }\n    },\n    moeScroll(time = 200) {\n      setTimeout(() => {\n        var container = this.$el.querySelector('.content')\n        container.scrollTop = container.scrollHeight\n      }, time)\n    },\n    getBrowserType() {\n      // 获取浏览器 userAgent\n      var ua = navigator.userAgent\n      // 是否为 Opera\n      if (ua.indexOf('Opera') > -1) {\n        return 'Opera'\n      }\n\n      // 是否为 IE\n      var isIE = ua.indexOf('compatible') > -1 && ua.indexOf('MSIE') > -1 && !isOpera\n      var isIE11 = ua.indexOf('Trident') > -1 && ua.indexOf('rv:11.0') > -1\n      // 返回结果\n      if (isIE11) {\n        return 'IE11'\n      } else if (isIE) {\n        return 'IE'\n      }\n      // 是否为 Edge\n      if (ua.indexOf('Edg') > -1) {\n        return 'Edge'\n      }\n      // 是否为 Firefox\n      if (ua.indexOf('Firefox') > -1) {\n        return 'Firefox'\n      }\n      // 是否为 Safari\n      if (ua.indexOf('Safari') > -1 && ua.indexOf('Chrome') == -1) {\n        return 'Safari'\n      }\n      // 是否为 Chrome\n      if (ua.indexOf('Chrome') > -1 && ua.indexOf('Safari') > -1 && ua.indexOf('Edge') == -1) {\n        return 'Chrome'\n      }\n      // 是否为 UC\n      if (ua.indexOf('UBrowser') > -1) {\n        return 'UC'\n      }\n      // 是否为 QQ\n      if (ua.indexOf('QQBrowser') > -1) {\n        return 'QQ'\n      }\n      // 都不是\n      return '未知设备'\n    },\n    // 封装信息体\n    packMsg(id, name, type, time, icon, msg, header = null, isRead = 0) {\n      return {\n        id: id,\n        name: name,\n        type: type,\n        time: time,\n        icon: icon == null ? this.defaultImg : icon,\n        msg: msg,\n        header: header,\n        isRead: isRead,\n      }\n    },\n    // 心跳包检测\n    hartCheck(friends) {\n      // 如果与服务器的连接断开了\n      if (this.$ws.ws.readyState === this.$ws.ws.CLOSED) {\n        this.$message.warning('聊天服务器已断开')\n        clearInterval(this.hart.timeObj)\n        // 将所有用户设为离线\n        for (let i in this.chatInfo) {\n          this.chatInfo[i]['online'] = false\n        }\n        return\n      }\n\n      let friends_list = ''\n      for (const iterator in friends) {\n        if (parseInt(iterator) > 0) {\n          if (!this.hart.check[iterator]) {\n            this.$set(friends[iterator], 'online', false)\n          }\n          friends_list += iterator + '|'\n        }\n      }\n      this.$ws.ws.send(JSON.stringify({ type: this.hart.type, friends_list }))\n    },\n  },\n  async mounted() {\n    this.me = store.getters.user\n    this.token_msg = {\n      id: this.me.id,\n      name: this.me.name,\n      icon: this.me.acatar,\n      msg: [],\n      header: 'null',\n      isRead: 1,\n      type: 'contact',\n      time: formatTimestamp(),\n    }\n\n    // 默认AI聊天机器人信息\n    this.chatInfo['-1'] = this.packMsg(\n      '-1',\n      '在线直聘智能机',\n      'sys',\n      formatTimestamp(),\n      require('@/assets/image/user/Cat.png'),\n      [\n        {\n          type: 'sys',\n          text:\n            \"\\\n      <div class='sys-msg'>\\\n        <h2>登录操作通知</h2>\\\n        <div class='describe'>[\" +\n            this.me.nickname +\n            \"]欢迎回来蜗牛兼职平台</div>\\\n        <div class='info'>\\\n          <div>\\\n            <span>设备/平台</span>\\\n            <span>\" +\n            this.getBrowserType() +\n            '浏览器</span>\\\n          </div>\\\n          <div>\\\n            <span>登录方式</span>\\\n            <span>普通登录</span>\\\n          </div>\\\n          <div>\\\n            <span>当前时间</span>\\\n            <span>' +\n            formatTimestamp() +\n            '</span>\\\n          </div>\\\n          <div>\\\n            <span></span>\\\n            <span>如有疑问,可以对我说噢!</span>\\\n          </div>\\\n        </div>\\\n      </div>\\\n    ',\n          time: formatTimestamp(),\n        },\n      ],\n      '登录操作通知',\n      1,\n    )\n\n    // 连接到服务器并接收消息\n    if (this.$ws.ws.readyState == 1) {\n      await this.recvMsg()\n    }\n  },\n  beforeDestroy() {\n    clearTimeout(this.wsCtl.timer)\n    clearInterval(this.hart.timeObj)\n  },\n}\n",null]}