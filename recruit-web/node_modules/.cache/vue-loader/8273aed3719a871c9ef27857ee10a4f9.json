{"remainingRequest":"D:\\recruit\\recruit-system\\recruit-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\recruit\\recruit-system\\recruit-web\\src\\plugin\\lin-cms-ui\\view\\table\\table-combo.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\recruit\\recruit-system\\recruit-web\\src\\plugin\\lin-cms-ui\\view\\table\\table-combo.vue","mtime":1706286066000},{"path":"D:\\recruit\\recruit-system\\recruit-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\recruit\\recruit-system\\recruit-web\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\recruit\\recruit-system\\recruit-web\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\recruit\\recruit-system\\recruit-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\recruit\\recruit-system\\recruit-web\\node_modules\\vue-loader\\lib\\index.js","mtime":1655715099000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport LinSearch from '@/component/base/search/lin-search'\nimport { tableColumn } from './data'\nimport movie from '../../model/movie.js'\n\nexport default {\n  components: {\n    LinSearch,\n  },\n  data() {\n    return {\n      tableData: [],\n      loading: false,\n      Hidden: true, // 默认隐藏自定义排序列\n      searchKeyword: '',\n      // 定制列相关\n      checkList: [],\n      filterTableColumn: [],\n      // 分页相关\n      refreshPagination: true, // 页数增加的时候，因为缓存的缘故，需要刷新Pagination组件\n      currentPage: 1, // 默认获取第一页的数据\n      pageCount: 10, // 每页10条数据\n      total_nums: 180, // 分组内的用户总数\n      // 固定列相关\n      dialogTableVisible: false,\n      fixedLeftList: [],\n      fixedRightList: [],\n      value: '',\n      // 单元格编辑相关\n      editRow: 0,\n      showTooltip: true,\n    }\n  },\n  computed: {},\n  created() {\n    // 获取数据\n    this._getTableData((this.currentPage - 1) * this.pageCount, this.pageCount)\n    this.tableColumn = tableColumn\n    // 操作栏\n    this.operate = [\n      { name: '编辑', func: 'handleEdit', type: 'primary' },\n      { name: '删除', func: 'handleDelete', type: 'danger' },\n    ]\n    // 定制列\n    this.tempCheckList = tableColumn.map(v => v.label).slice()\n    this.checkList = tableColumn.map(v => v.label)\n    this.filterTableColumn = tableColumn.filter(v => this.checkList.indexOf(v.label) > -1)\n  },\n  methods: {\n    // 获取数据\n    _getTableData(start, count) {\n      const res = movie.getTop250(start, count)\n      res.map(item => {\n        const temp = item\n        temp.editFlag = false\n        return ''\n      })\n      this.tableData = [...res]\n    },\n\n    rowClick(val) {\n      console.log(val)\n    },\n\n    // 定制列\n    handleChange() {\n      this.filterTableColumn = tableColumn.filter(v => this.checkList.indexOf(v.label) > -1)\n    },\n    showRowOperateModal() {},\n\n    // 变更排序\n    handleSort(val, rowData) {\n      console.log('rowData', rowData)\n      this.$message({\n        type: 'success',\n        message: `排序已更改为：${val}`,\n      })\n    },\n\n    // 推荐\n    handleRecommend(val, rowData) {\n      this.loading = true\n      console.log(val, rowData)\n      if (val) {\n        setTimeout(() => {\n          this.loading = false\n          this.$message({\n            type: 'success',\n            message: '推荐成功',\n          })\n        }, 1000)\n      } else {\n        setTimeout(() => {\n          this.loading = false\n          this.$message({\n            type: 'success',\n            message: '取消推荐',\n          })\n        }, 1000)\n      }\n    },\n\n    expandChange(row, expandedRows) {\n      console.log(row, expandedRows)\n    },\n\n    // 单元格编辑\n    handleCellEdit(row) {\n      row.editFlag = true // eslint-disable-line\n      this.$set(this.filterTableColumn[7], 'width', 200)\n      this.tempEditRemark = row.remark\n      this.editRow++\n    },\n    handleCellSave(row) {\n      row.editFlag = false // eslint-disable-line\n      setTimeout(() => {\n        this.editRow--\n        this.$message({\n          type: 'success',\n          message: '修改成功',\n        })\n      }, 1000)\n    },\n    handleCellCancel(row) {\n      row.editFlag = false // eslint-disable-line\n      console.log(this.tempEditRemark)\n      row.remark = this.tempEditRemark // eslint-disable-line\n      this.editRow--\n    },\n\n    // 切换分页\n    async handleCurrentChange(val) {\n      this.currentPage = val\n      this.loading = true\n      setTimeout(() => {\n        this._getTableData((this.currentPage - 1) * this.pageCount, this.pageCount)\n        this.loading = false\n      }, 1000)\n    },\n\n    // 操作列\n    buttonMethods(func, index, row) {\n      const self = this\n      const { methods } = this.$options\n      methods[func](self, index, row)\n    },\n    handleEdit(self, index, row) {\n      self.handleCellEdit(row)\n      console.log(index, row)\n    },\n    handleDelete(self, index, val) {\n      console.log(val)\n      self\n        .$confirm('此操作将永久删除该信息, 是否继续?', '提示', {\n          confirmButtonText: '确定',\n          cancelButtonText: '取消',\n          type: 'warning',\n        })\n        .then(async () => {\n          self.loading = true // eslint-disable-line\n          setTimeout(() => {\n            self.tableData.splice(index, 1)\n            self.loading = false // eslint-disable-line\n          }, 1000)\n        })\n    },\n\n    // 搜索\n    onQueryChange(query) {\n      this.searchKeyword = query.trim()\n      if (!query) {\n        this._getTableData(0, 20)\n        return\n      }\n      this.loading = true\n      setTimeout(() => {\n        this.loading = false\n        this.tableData = movie.getDataByQuery(this.searchKeyword)\n      }, 1000)\n    },\n  },\n\n  watch: {\n    // 监听固定列变化\n    fixedLeftList() {\n      this.filterTableColumn.map((item, index) => {\n        if (this.fixedLeftList.indexOf(item.label) > -1) {\n          this.$set(this.filterTableColumn[index], 'fixed', 'left')\n        } else if (this.fixedRightList.indexOf(item.label) === -1) {\n          this.$set(this.filterTableColumn[index], 'fixed', false)\n        }\n        return ''\n      })\n      console.log(this.filterTableColumn)\n    },\n    fixedRightList() {\n      this.filterTableColumn.map((item, index) => {\n        if (this.fixedRightList.indexOf(item.label) > -1) {\n          this.$set(this.filterTableColumn[index], 'fixed', 'right')\n        } else if (this.fixedLeftList.indexOf(item.label) === -1) {\n          this.$set(this.filterTableColumn[index], 'fixed', false)\n        }\n        return ''\n      })\n      console.log(this.filterTableColumn)\n    },\n    editRow() {\n      if (this.filterTableColumn[7]) {\n        this.editRow === 0 // eslint-disable-line\n          ? this.$set(this.filterTableColumn[7], 'width', 200) // eslint-disable-line\n          : null // eslint-disable-line\n      }\n      return ''\n    },\n  },\n}\n",null]}