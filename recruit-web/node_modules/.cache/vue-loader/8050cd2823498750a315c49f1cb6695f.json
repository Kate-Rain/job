{"remainingRequest":"D:\\recruit\\recruit-system\\recruit-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\recruit\\recruit-system\\recruit-web\\src\\view\\position\\position-detail.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\recruit\\recruit-system\\recruit-web\\src\\view\\position\\position-detail.vue","mtime":1745594676273},{"path":"D:\\recruit\\recruit-system\\recruit-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\recruit\\recruit-system\\recruit-web\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\recruit\\recruit-system\\recruit-web\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\recruit\\recruit-system\\recruit-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\recruit\\recruit-system\\recruit-web\\node_modules\\vue-loader\\lib\\index.js","mtime":1655715099000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { Position } from '@/model/position'\nimport { Application } from '@/model/application'\nimport { Resume } from '@/model/resume'\nimport { Favor } from '@/model/favor'\nimport Vue from 'vue'\nimport Utils from \"@/lin/util/util\"\nimport User from '@/lin/model/user'\n\nimport store from '@/store';\nimport router from '../../router'\nimport provinces from \"@/lin/util/provinces\"\nimport { VueJsonp } from 'vue-jsonp'\nVue.use(VueJsonp)\n\nexport default {\n  // 定义变量\n  props: {\n    // 子组件定义的变量通过父组件赋值\n    detailPositionID: {\n      \ttype: Number,\n    },\n    flag: {\n\t\ttype: Boolean,\n\t\tdefault: true,\n    },\n    temp: {\n\t\ttype: Number,\n\t\tdefault: 0,\n    },\n  },\n  data() {\n    return {\n\t\tme:null,\n\t\thr:null,\n\t\tcity:null,\n\t\tloading: false,\n\t\toutMap : false,\n\t\tform: {},\n\t\tlist: {\n\t\t\tuser_id: '',\n\t\t\tposition_id: '',\n\t\t\tresume_id: '',\n\t\t\thr_id: '',\n\t\t\tcompany_id: '',\n\t\t},\n\t\tcollect: {},\n\t\tmapData:{point:\"\",city:null,district:null,searchList:null,address:null},\n\t\tdeAvatar:require(\"@/assets/image/user/94bf413e-7176-4713-bc08-fbfa44ac0f11.png\")\n    }\n  },\n  \tasync mounted() {\n\t\tthis.loading = true\n\t\tconst res = await Position.getById(this.detailPositionID)\n\t\t// 更新职位浏览量(每进入一次职位详情页面，职位浏览量加一)\n\t\tawait Position.updateHits(this.detailPositionID)\n\t\tthis.form = res\n\t\tthis.loading = false;\n\t\tthis.hr = await User.getID_UserData(this.form.hr_id)\n\t\tthis.hr.avatar = this.hr.avatar!=null ? this.hr.avatar : this.deAvatar\n\t\t\n\t\t// 获取当前工作地点处于的省份\n\t\tprovinces.forEach((item,index) => {\n\t\t\titem.city.forEach((itt, idx) => {\n\t\t\t\tif (itt.name.indexOf(this.form.city)!=-1) {\n\t\t\t\t\tthis.city = item.name\n\t\t\t\t}else{\n\t\t\t\t\t// 如果 当前公司地址属于附属城市,那么判定当前城市的所有附属城市中是否有当前城市开头的,以\"标识\n\t\t\t\t\tif(JSON.stringify(itt.districtAndCounty).indexOf('\"'+this.form.city)!=-1){\n\t\t\t\t\t\tthis.city = item.name\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t})\n\t\t// console.log(\"读取到的权限\",store.getters.user);\n\t\tif (store.getters.user){\n\t\t\t// 未登录状态和hr不执行后续代码\n\t\t\tthis.me = store.getters.user;\n\t\t\tif(this.me)return;\n\t\t\tthis.getInfo()\n\t\t}\n  },\n  \tmethods: {\n\t\tasync handlePass(val) {\n\t\tconst res = await Position.updateState(this.detailPositionID, 1)\n\t\tif (res.code < window.MAX_SUCCESS_CODE) {\n\t\t\tthis.$message.success(`${res.message}`)\n\t\t\t// 返回查询所有未审核职位的页面\n\t\t\tthis.$emit('detailClose')\n\t\t}\n\t\t},\n\t\tasync handleFail(val) {\n\t\tconst res = await Position.updateState(this.detailPositionID, 2)\n\t\tif (res.code < window.MAX_SUCCESS_CODE) {\n\t\t\tthis.$message.success(`${res.message}`)\n\t\t\t// 返回查询所有未审核职位的页面\n\t\t\tthis.$emit('detailClose')\n\t\t}\n\t\t},\n\t\tasync isDelive(val){\n\t\t\tif(!this.$store.getters.user) return;\n\t\t\tlet result = await Application.getByPositionIdAndUserId(this.detailPositionID, this.$store.getters.user.id);\n\t\t\t// console.log(\"result\",result);\n\t\t\treturn result;\n\t\t},\n\t\t// 投递简历\n\t\tasync handleDelivery(val) {\n\t\t\tif (this.$store.getters.user === null) {\n\t\t\t\tthis.$message.error(\"请注册登录后投递简历\")\n\t\t\t\treturn\n\t\t\t}\n\t\t\t// 根据用户id和职位id判断用户是否已经投递过该职位，避免重复投递\n\t\t\tconst flag = await Application.getByPositionIdAndUserId(this.detailPositionID, this.$store.getters.user.id)\n\t\t\tif (flag === false) {\n\t\t\t\t// 不能重复投递\n\t\t\t\tthis.$message.error(\"你已投递过该职位，不可重复投递\")\n\t\t\t} else {\n\t\t\t\t// 获取当前登录求职者的用户id\n\t\t\t\tthis.list.user_id = this.$store.getters.user.id\n\t\t\t\t// 获取当前投递简历的职位id\n\t\t\t\tthis.list.position_id = this.detailPositionID\n\t\t\t\t// 根据用户id查询绑定的简历id\n\t\t\t\tconst temp = await Resume.getByUserId(this.$store.getters.user.id)\n\t\t\t\tthis.list.resume_id = temp.resume_id\n\t\t\t\t// 根据职位id查询该职位所对应的hr_id\n\t\t\t\tconst result = await Position.getById(this.detailPositionID)\n\t\t\t\tthis.list.hr_id = result.hr_id\n\t\t\t\tthis.list.company_id = result.company_id\n\t\t\t\t// 调用创建申请的方法\n\t\t\t\tconst res = await Application.create(this.list)\n\t\t\t\tif (res.code < window.MAX_SUCCESS_CODE) {\n\t\t\t\tthis.$message.success(`${res.message}`)\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tasync getInfo() {\n\t\t\t// 获取当前登录求职者的用户id\n\t\t\tthis.list.user_id = this.$store.getters.user.id\n\t\t\t// 获取当前投递简历的职位id\n\t\t\tthis.list.position_id = this.detailPositionID\n\t\t\t// 根据用户id查询绑定的简历id\n\t\t\tconst temp = await Resume.getByUserId(this.$store.getters.user.id)\n\t\t\tthis.list.resume_id = temp.id\n\t\t\t// 根据职位id查询该职位所对应的hr_id\n\t\t\tconst result = await Position.getById(this.detailPositionID)\n\t\t\tthis.list.hr_id = result.hr_id\n\t\t\tthis.list.company_id = result.company_id\n\t\t},\n\t\t// 收藏职位\n\t\tasync handleCollect(val) {\n\t\t\tif (this.$store.getters.user === null) {\n\t\t\t\tthis.$message.error(\"请注册登录后收藏职位\")\n\t\t\t\treturn\n\t\t\t}\n\t\t\t// 获取当前登录求职者的用户id\n\t\t\tthis.collect.user_id = this.$store.getters.user.id\n\t\t\t// 获取当前收藏的职位id\n\t\t\tthis.collect.position_id = this.detailPositionID\n\t\t\t// 调用添加收藏的方法\n\t\t\tconst res = await Favor.create(this.collect)\n\t\t\tif (res.code < window.MAX_SUCCESS_CODE) {\n\t\t\t\tthis.$message.success(`${res.message}`)\n\t\t\t}\n\t\t},\n\t\tback() {\n\t\t\t// this.$router.go(-1)\n\t\t\t// 由于showEdit这个变量是在父组件定义的，因此不能在子组件改变该变量的值，可以使用事件传递的方式，当点击了返回按钮，触发的事件处理机制交给父组件去处理\n\t\t\tthis.$emit('detailClose')\n\t\t},\n\t\t// 查看地图\n\t\tshowMap(){\n\t\t\t// 显示地图组件,优先执行,保证地图组件能够正常创建\n\t\t\tthis.outMap = true;\n\t\t\tthis.searchMap()\n\t\t},\n\t\tsearchMap(){\n\t\t\tthis.$message.success(\"正在获取地图数据\")\n\t\t\tlet url = \"https://apis.map.qq.com/ws/place/v1/suggestion\";\n\t\t\tlet __this = this;\n\t\t\tthis.$jsonp(url, {\n\t\t\t\t\tkey: Utils.getMapAPI(),\n\t\t\t\t\tregion: this.form.city,\n\t\t\t\t\tkeyword: this.form.company_name,\n\t\t\t\t\toutput: \"jsonp\",\n\t\t\t\t})\n\t\t\t.then((res) => {\n\t\t\t\tres.data.forEach((item) => {\n\t\t\t\t\titem.value = item.title;//因为element的远程搜索只能识别value所以需要对返回的数据进行一下处理\n\t\t\t\t});\n\t\t\t\t// console.log(\"res.data\",res.data);\n\t\t\t\t__this.mapData.searchList = res.data\n\t\t\t\tif(res.data[0]){\n\t\t\t\t\t__this.mapData.address = res.data[0].address\n\t\t\t\t\t__this.mapData.city = res.data[0].province\n\t\t\t\t\t__this.mapData.district = res.data[0].city + \"/\"+res.data[0].district\n\t\t\t\t\t__this.createMap(res.data[0].location.lat,res.data[0].location.lng)\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\tconsole.log(err);\n\t\t\t});\n\t\t},\n\t\t// 生成地图数据\n\t\tcreateMap(w,h){\n\t\t\t//步骤：定义map变量 调用 qq.maps.Map() 构造函数   获取地图显示容器\n\t\t\tvar myLatlng = new qq.maps.LatLng(w,h);\n\t\t\tthis.mapData.point = w+\",\"+h;\n\t\t\t//定义工厂模式函数\n\t\t\tvar myOptions = {\n\t\t\t\tzoom: 15,               //设置地图缩放级别\n\t\t\t\tcenter: myLatlng,      //设置中心点样式\n\t\t\t\tmapTypeId: qq.maps.MapTypeId.ROADMAP  \n\t\t\t}\n\t\t\t//获取父元素\n\t\t\tlet content = document.getElementById(\"container\");\n\t\t\t//循环删除子元素，一直删除第一个子元素直到没有子元素即为清空\n\t\t\twhile (content.hasChildNodes()) {\n\t\t\t\tcontent.removeChild(content.firstChild);\n\t\t\t}\n\t\t\t//获取dom元素添加地图信息\n\t\t\tvar map = new qq.maps.Map(document.getElementById(\"container\"), myOptions);\n\t\t\t//给定位的位置添加图片标注\n\t\t\tvar marker = new qq.maps.Marker({\n\t\t\t\tposition: myLatlng,\n\t\t\t\tmap: map\n\t\t\t});\n\t\t\t//给定位的位置添加文本标注\n\t\t\tvar marker1 = new qq.maps.Label({\n\t\t\t\tposition: myLatlng,\n\t\t\t\tmap: map,\n\t\t\t\tcontent:this.form.company_name\n\t\t\t});\n\t\t\tthis.$message.success(\"获取地图数据成功!\")\n\t\t},\n\t\tcontactHR(){\n\t\t\tlet msg = {\n\t\t\t\trecvId:this.form.hr_id,\n\t\t\t\tself:{name:this.me.nickname,icon:this.me.avatar},\n\t\t\t\ttarget:{name:this.hr.name,icon:this.hr.avatar},\n\t\t\t\ttime:new Date().toLocaleString()\n\t\t\t}\n\t\t\tlet data = {type:\"handToken\",info:msg}\n\t\t\tthis.$ws.ws.send(JSON.stringify(data))\n\t\t\tthis.$router.push(\"/ws-msg\")\n\t\t}\n\t},\n}\n",null]}