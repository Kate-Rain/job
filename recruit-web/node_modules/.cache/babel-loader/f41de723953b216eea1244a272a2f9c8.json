{"remainingRequest":"D:\\001JavaTools\\001Java项目\\招聘系统\\recruit-system\\recruit-web\\node_modules\\thread-loader\\dist\\cjs.js!D:\\001JavaTools\\001Java项目\\招聘系统\\recruit-system\\recruit-web\\node_modules\\babel-loader\\lib\\index.js!D:\\001JavaTools\\001Java项目\\招聘系统\\recruit-system\\recruit-web\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\001JavaTools\\001Java项目\\招聘系统\\recruit-system\\recruit-web\\src\\component\\notify\\index.js","dependencies":[{"path":"D:\\001JavaTools\\001Java项目\\招聘系统\\recruit-system\\recruit-web\\src\\component\\notify\\index.js","mtime":1706286066000},{"path":"D:\\001JavaTools\\001Java项目\\招聘系统\\recruit-system\\recruit-web\\babel.config.js","mtime":1706286066000},{"path":"D:\\001JavaTools\\001Java项目\\招聘系统\\recruit-system\\recruit-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\001JavaTools\\001Java项目\\招聘系统\\recruit-system\\recruit-web\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\001JavaTools\\001Java项目\\招聘系统\\recruit-system\\recruit-web\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\001JavaTools\\001Java项目\\招聘系统\\recruit-system\\recruit-web\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n/* eslint-disable*/\n\n/* Author: https://github.com/nathantsoi/vue-native-websocket */\nimport Notify from './notify.vue';\nimport Observer from './observer';\nimport Emitter from './emitter';\nexport default {\n  install: function install(Vue, connection) {\n    var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    if (_typeof(connection) === 'object') {\n      opts = connection;\n      connection = '';\n    }\n\n    var observer = null;\n\n    opts.$setInstance = function (wsInstance) {\n      Vue.prototype.$socket = wsInstance;\n    };\n\n    Vue.prototype.$connect = function () {\n      var connectionUrl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : connection;\n      var connectionOpts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : opts;\n      connectionOpts.$setInstance = opts.$setInstance;\n      observer = new Observer(connectionUrl, connectionOpts);\n      Vue.prototype.$socket = observer.WebSocket;\n    };\n\n    Vue.prototype.$disconnect = function () {\n      if (observer && observer.reconnection) {\n        observer.reconnection = false;\n      }\n\n      if (Vue.prototype.$socket) {\n        Vue.prototype.$socket.close();\n        delete Vue.prototype.$socket;\n      }\n    };\n\n    var hasProxy = typeof Proxy !== 'undefined' && typeof Proxy === 'function' && /native code/.test(Proxy.toString());\n    Vue.component('LinNotify', Notify);\n    Vue.mixin({\n      created: function created() {\n        var _this = this;\n\n        var vm = this;\n        var sockets = this.$options.sockets;\n\n        if (hasProxy) {\n          this.$options.sockets = new Proxy({}, {\n            set: function set(target, key, value) {\n              Emitter.addListener(key, value, vm);\n              target[key] = value;\n              return true;\n            },\n            deleteProperty: function deleteProperty(target, key) {\n              Emitter.removeListener(key, vm.$options.sockets[key], vm);\n              delete target.key;\n              return true;\n            }\n          });\n\n          if (sockets) {\n            Object.keys(sockets).forEach(function (key) {\n              _this.$options.sockets[key] = sockets[key];\n            });\n          }\n        } else {\n          Object.seal(this.$options.sockets); // if !hasProxy need addListener\n\n          if (sockets) {\n            Object.keys(sockets).forEach(function (key) {\n              Emitter.addListener(key, sockets[key], vm);\n            });\n          }\n        }\n      },\n      beforeDestroy: function beforeDestroy() {\n        var _this2 = this;\n\n        if (hasProxy) {\n          var sockets = this.$options.sockets;\n\n          if (sockets) {\n            Object.keys(sockets).forEach(function (key) {\n              delete _this2.$options.sockets[key];\n            });\n          }\n        }\n      }\n    });\n  }\n};",null]}