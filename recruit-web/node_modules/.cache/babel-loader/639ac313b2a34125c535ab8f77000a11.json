{"remainingRequest":"D:\\001JavaTools\\001Java项目\\招聘系统\\recruit-system\\recruit-web\\node_modules\\babel-loader\\lib\\index.js!D:\\001JavaTools\\001Java项目\\招聘系统\\recruit-system\\recruit-web\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\001JavaTools\\001Java项目\\招聘系统\\recruit-system\\recruit-web\\src\\lin\\util\\time-formatter.js","dependencies":[{"path":"D:\\001JavaTools\\001Java项目\\招聘系统\\recruit-system\\recruit-web\\src\\lin\\util\\time-formatter.js","mtime":1743604245452},{"path":"D:\\001JavaTools\\001Java项目\\招聘系统\\recruit-system\\recruit-web\\babel.config.js","mtime":1706286066000},{"path":"D:\\001JavaTools\\001Java项目\\招聘系统\\recruit-system\\recruit-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\001JavaTools\\001Java项目\\招聘系统\\recruit-system\\recruit-web\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\001JavaTools\\001Java项目\\招聘系统\\recruit-system\\recruit-web\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["/**\r\n * 时间格式化工具函数集合\r\n * 用于聊天应用中各种时间显示格式化\r\n */\n\n/**\r\n * 格式化消息时间显示\r\n * 24小时内：显示时间（如 09:30）\r\n * 昨天：显示\"昨天 HH:MM\"\r\n * 7天内：显示\"周X HH:MM\"\r\n * 超过7天：显示\"M月D日 HH:MM\"\r\n * @param {string} timeString - 日期时间字符串\r\n * @returns {string} 格式化后的时间字符串\r\n */\nexport function formatMessageTime(timeString) {\n  if (!timeString) return '';\n  var date = new Date(timeString);\n  var now = new Date(); // 检查日期是否有效\n\n  if (isNaN(date)) {\n    return timeString;\n  }\n\n  var hours = date.getHours().toString().padStart(2, '0');\n  var minutes = date.getMinutes().toString().padStart(2, '0');\n  var timeStr = \"\".concat(hours, \":\").concat(minutes); // 同一天，只显示时间\n\n  if (isSameDay(date, now)) {\n    return timeStr;\n  } // 昨天\n\n\n  var yesterday = new Date(now);\n  yesterday.setDate(now.getDate() - 1);\n\n  if (isSameDay(date, yesterday)) {\n    return \"\\u6628\\u5929 \".concat(timeStr);\n  } // 7天内，显示周几\n\n\n  var oneWeekAgo = new Date(now);\n  oneWeekAgo.setDate(now.getDate() - 7);\n\n  if (date > oneWeekAgo) {\n    var weekdays = ['周日', '周一', '周二', '周三', '周四', '周五', '周六'];\n    var weekday = weekdays[date.getDay()];\n    return \"\".concat(weekday, \" \").concat(timeStr);\n  } // 超过7天，显示月日\n\n\n  var month = (date.getMonth() + 1).toString();\n  var day = date.getDate().toString();\n  return \"\".concat(month, \"\\u6708\").concat(day, \"\\u65E5 \").concat(timeStr);\n}\n/**\r\n * 格式化左侧聊天列表时间显示\r\n * 24小时内：显示\"HH:MM\"\r\n * 超过24小时：显示\"M月D日\"\r\n * @param {string} timeString - 日期时间字符串\r\n * @returns {string} 格式化后的时间字符串\r\n */\n\nexport function formatSidebarTime(timeString) {\n  if (!timeString) return '';\n  var date = new Date(timeString);\n  var now = new Date(); // 检查日期是否有效\n\n  if (isNaN(date)) {\n    return timeString;\n  }\n\n  var hours = date.getHours().toString().padStart(2, '0');\n  var minutes = date.getMinutes().toString().padStart(2, '0'); // 24小时内\n\n  var twentyFourHoursAgo = new Date(now);\n  twentyFourHoursAgo.setHours(now.getHours() - 24);\n\n  if (date > twentyFourHoursAgo) {\n    return \"\".concat(hours, \":\").concat(minutes);\n  } // 超过24小时\n\n\n  var month = (date.getMonth() + 1).toString();\n  var day = date.getDate().toString();\n  return \"\".concat(month, \"\\u6708\").concat(day, \"\\u65E5\");\n}\n/**\r\n * 判断是否应该显示时间戳\r\n * 每条消息的第一条或者与前一条消息间隔超过1分钟才显示\r\n * @param {number} index - 当前消息索引\r\n * @param {Array} messages - 消息数组\r\n * @returns {boolean} 是否应该显示时间戳\r\n */\n\nexport function shouldShowTimestamp(index, messages) {\n  // 始终显示第一条消息的时间戳\n  if (index === 0) {\n    return true;\n  } // 获取消息时间戳\n\n\n  var currentTimeStr = messages[index].time;\n  var prevTimeStr = messages[index - 1].time; // 尝试解析时间戳\n\n  var currentMsgTime, prevMsgTime;\n\n  try {\n    currentMsgTime = new Date(currentTimeStr);\n    prevMsgTime = new Date(prevTimeStr); // 检查解析结果是否为有效日期\n\n    if (isNaN(currentMsgTime) || isNaN(prevMsgTime)) {\n      return true; // 如果无法正确比较，则显示时间戳\n    } // 计算时间差（秒）\n\n\n    var timeDiff = (currentMsgTime - prevMsgTime) / 1000; // 如果时间差超过60秒，则显示时间戳\n\n    return timeDiff >= 60;\n  } catch (error) {\n    // 出现任何错误都显示时间戳\n    return true;\n  }\n}\n/**\r\n * 格式化完整时间戳字符串\r\n * 返回包含秒的完整时间戳，用于消息存储和比较\r\n * @returns {string} 格式化的时间戳，格式: YYYY/MM/DD HH:MM:SS\r\n */\n\nexport function formatTimestamp() {\n  var now = new Date();\n  var year = now.getFullYear();\n  var month = String(now.getMonth() + 1).padStart(2, '0');\n  var day = String(now.getDate()).padStart(2, '0');\n  var hours = String(now.getHours()).padStart(2, '0');\n  var minutes = String(now.getMinutes()).padStart(2, '0');\n  var seconds = String(now.getSeconds()).padStart(2, '0');\n  return \"\".concat(year, \"/\").concat(month, \"/\").concat(day, \" \").concat(hours, \":\").concat(minutes, \":\").concat(seconds);\n}\n/**\r\n * 判断两个日期是否是同一天\r\n * @param {Date} date1 - 第一个日期\r\n * @param {Date} date2 - 第二个日期\r\n * @returns {boolean} 是否为同一天\r\n */\n\nfunction isSameDay(date1, date2) {\n  return date1.getDate() === date2.getDate() && date1.getMonth() === date2.getMonth() && date1.getFullYear() === date2.getFullYear();\n}",{"version":3,"names":["formatMessageTime","timeString","date","Date","now","isNaN","hours","getHours","toString","padStart","minutes","getMinutes","timeStr","isSameDay","yesterday","setDate","getDate","oneWeekAgo","weekdays","weekday","getDay","month","getMonth","day","formatSidebarTime","twentyFourHoursAgo","setHours","shouldShowTimestamp","index","messages","currentTimeStr","time","prevTimeStr","currentMsgTime","prevMsgTime","timeDiff","error","formatTimestamp","year","getFullYear","String","seconds","getSeconds","date1","date2"],"sources":["D:/001JavaTools/001Java项目/招聘系统/recruit-system/recruit-web/src/lin/util/time-formatter.js"],"sourcesContent":["/**\r\n * 时间格式化工具函数集合\r\n * 用于聊天应用中各种时间显示格式化\r\n */\r\n\r\n/**\r\n * 格式化消息时间显示\r\n * 24小时内：显示时间（如 09:30）\r\n * 昨天：显示\"昨天 HH:MM\"\r\n * 7天内：显示\"周X HH:MM\"\r\n * 超过7天：显示\"M月D日 HH:MM\"\r\n * @param {string} timeString - 日期时间字符串\r\n * @returns {string} 格式化后的时间字符串\r\n */\r\nexport function formatMessageTime(timeString) {\r\n  if (!timeString) return '';\r\n  \r\n  const date = new Date(timeString);\r\n  const now = new Date();\r\n  \r\n  // 检查日期是否有效\r\n  if (isNaN(date)) {\r\n    return timeString;\r\n  }\r\n  \r\n  const hours = date.getHours().toString().padStart(2, '0');\r\n  const minutes = date.getMinutes().toString().padStart(2, '0');\r\n  const timeStr = `${hours}:${minutes}`;\r\n  \r\n  // 同一天，只显示时间\r\n  if (isSameDay(date, now)) {\r\n    return timeStr;\r\n  }\r\n  \r\n  // 昨天\r\n  const yesterday = new Date(now);\r\n  yesterday.setDate(now.getDate() - 1);\r\n  if (isSameDay(date, yesterday)) {\r\n    return `昨天 ${timeStr}`;\r\n  }\r\n  \r\n  // 7天内，显示周几\r\n  const oneWeekAgo = new Date(now);\r\n  oneWeekAgo.setDate(now.getDate() - 7);\r\n  \r\n  if (date > oneWeekAgo) {\r\n    const weekdays = ['周日', '周一', '周二', '周三', '周四', '周五', '周六'];\r\n    const weekday = weekdays[date.getDay()];\r\n    return `${weekday} ${timeStr}`;\r\n  }\r\n  \r\n  // 超过7天，显示月日\r\n  const month = (date.getMonth() + 1).toString();\r\n  const day = date.getDate().toString();\r\n  return `${month}月${day}日 ${timeStr}`;\r\n}\r\n\r\n/**\r\n * 格式化左侧聊天列表时间显示\r\n * 24小时内：显示\"HH:MM\"\r\n * 超过24小时：显示\"M月D日\"\r\n * @param {string} timeString - 日期时间字符串\r\n * @returns {string} 格式化后的时间字符串\r\n */\r\nexport function formatSidebarTime(timeString) {\r\n  if (!timeString) return '';\r\n  \r\n  const date = new Date(timeString);\r\n  const now = new Date();\r\n  \r\n  // 检查日期是否有效\r\n  if (isNaN(date)) {\r\n    return timeString;\r\n  }\r\n  \r\n  const hours = date.getHours().toString().padStart(2, '0');\r\n  const minutes = date.getMinutes().toString().padStart(2, '0');\r\n  \r\n  // 24小时内\r\n  const twentyFourHoursAgo = new Date(now);\r\n  twentyFourHoursAgo.setHours(now.getHours() - 24);\r\n  \r\n  if (date > twentyFourHoursAgo) {\r\n    return `${hours}:${minutes}`;\r\n  }\r\n  \r\n  // 超过24小时\r\n  const month = (date.getMonth() + 1).toString();\r\n  const day = date.getDate().toString();\r\n  return `${month}月${day}日`;\r\n}\r\n\r\n/**\r\n * 判断是否应该显示时间戳\r\n * 每条消息的第一条或者与前一条消息间隔超过1分钟才显示\r\n * @param {number} index - 当前消息索引\r\n * @param {Array} messages - 消息数组\r\n * @returns {boolean} 是否应该显示时间戳\r\n */\r\nexport function shouldShowTimestamp(index, messages) {\r\n  // 始终显示第一条消息的时间戳\r\n  if (index === 0) {\r\n    return true;\r\n  }\r\n\r\n  // 获取消息时间戳\r\n  let currentTimeStr = messages[index].time;\r\n  let prevTimeStr = messages[index - 1].time;\r\n\r\n  // 尝试解析时间戳\r\n  let currentMsgTime, prevMsgTime;\r\n\r\n  try {\r\n    currentMsgTime = new Date(currentTimeStr);\r\n    prevMsgTime = new Date(prevTimeStr);\r\n\r\n    // 检查解析结果是否为有效日期\r\n    if (isNaN(currentMsgTime) || isNaN(prevMsgTime)) {\r\n      return true; // 如果无法正确比较，则显示时间戳\r\n    }\r\n\r\n    // 计算时间差（秒）\r\n    const timeDiff = (currentMsgTime - prevMsgTime) / 1000;\r\n\r\n    // 如果时间差超过60秒，则显示时间戳\r\n    return timeDiff >= 60;\r\n  } catch (error) {\r\n    // 出现任何错误都显示时间戳\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * 格式化完整时间戳字符串\r\n * 返回包含秒的完整时间戳，用于消息存储和比较\r\n * @returns {string} 格式化的时间戳，格式: YYYY/MM/DD HH:MM:SS\r\n */\r\nexport function formatTimestamp() {\r\n  const now = new Date();\r\n  const year = now.getFullYear();\r\n  const month = String(now.getMonth() + 1).padStart(2, '0');\r\n  const day = String(now.getDate()).padStart(2, '0');\r\n  const hours = String(now.getHours()).padStart(2, '0');\r\n  const minutes = String(now.getMinutes()).padStart(2, '0');\r\n  const seconds = String(now.getSeconds()).padStart(2, '0');\r\n\r\n  return `${year}/${month}/${day} ${hours}:${minutes}:${seconds}`;\r\n}\r\n\r\n/**\r\n * 判断两个日期是否是同一天\r\n * @param {Date} date1 - 第一个日期\r\n * @param {Date} date2 - 第二个日期\r\n * @returns {boolean} 是否为同一天\r\n */\r\nfunction isSameDay(date1, date2) {\r\n  return date1.getDate() === date2.getDate() && \r\n         date1.getMonth() === date2.getMonth() && \r\n         date1.getFullYear() === date2.getFullYear();\r\n}"],"mappings":"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"}]}