{"remainingRequest":"D:\\001JavaTools\\001Java项目\\招聘系统\\recruit-system\\recruit-web\\node_modules\\babel-loader\\lib\\index.js!D:\\001JavaTools\\001Java项目\\招聘系统\\recruit-system\\recruit-web\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\001JavaTools\\001Java项目\\招聘系统\\recruit-system\\recruit-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\001JavaTools\\001Java项目\\招聘系统\\recruit-system\\recruit-web\\src\\view\\admin\\user\\user-list.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\001JavaTools\\001Java项目\\招聘系统\\recruit-system\\recruit-web\\src\\view\\admin\\user\\user-list.vue","mtime":1743515307624},{"path":"D:\\001JavaTools\\001Java项目\\招聘系统\\recruit-system\\recruit-web\\babel.config.js","mtime":1706286066000},{"path":"D:\\001JavaTools\\001Java项目\\招聘系统\\recruit-system\\recruit-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\001JavaTools\\001Java项目\\招聘系统\\recruit-system\\recruit-web\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\001JavaTools\\001Java项目\\招聘系统\\recruit-system\\recruit-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\001JavaTools\\001Java项目\\招聘系统\\recruit-system\\recruit-web\\node_modules\\vue-loader\\lib\\index.js","mtime":1655715099000}],"contextDependencies":[],"result":["function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == _typeof(value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Admin from '@/lin/model/admin';\nimport LinTable from '@/component/base/table/lin-table';\nimport User from '@/lin/model/user';\nimport UserInfo from './user-info';\nimport UserPassword from './user-password';\nexport default {\n  components: {\n    LinTable: LinTable,\n    UserInfo: UserInfo,\n    UserPassword: UserPassword\n  },\n  inject: ['eventBus'],\n  data: function data() {\n    return {\n      id: 0,\n      // 用户id\n      refreshPagination: true,\n      // 页数增加的时候，因为缓存的缘故，需要刷新Pagination组件\n      editIndex: null,\n      // 编辑的行\n      total_nums: 0,\n      // 分组内的用户总数\n      currentPage: 1,\n      // 默认获取第一页的数据\n      pageCount: 10,\n      // 每页10条数据\n      tableData: [],\n      // 表格数据\n      tableColumn: [],\n      // 表头数据\n      operate: [],\n      // 表格按键操作区\n      dialogFormVisible: false,\n      // 控制弹窗显示\n      selectGroup: '',\n      // 选中的分组Id\n      groups: [],\n      // 所有分组\n      group_id: undefined,\n      activeTab: '修改信息',\n      form: {\n        // 表单信息\n        username: '',\n        password: '',\n        confirm_password: '',\n        email: '',\n        tel: '',\n        group_ids: []\n      },\n      loading: false\n    };\n  },\n  methods: {\n    // 根据分组 刷新/获取分组内的用户\n    // 根据分组 刷新/获取分组内的用户\n    getAdminUsers: function () {\n      var _getAdminUsers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var res, currentPage, currentUser, userGroups, isAdminUser;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                currentPage = this.currentPage - 1;\n                _context.prev = 1;\n                this.loading = true;\n                _context.next = 5;\n                return Admin.getAdminUsers({\n                  group_id: this.group_id,\n                  count: this.pageCount,\n                  page: currentPage\n                });\n\n              case 5:\n                res = _context.sent;\n                _context.next = 8;\n                return User.getInformation();\n\n              case 8:\n                currentUser = _context.sent;\n                userGroups = currentUser.groups || [];\n                isAdminUser = userGroups.some(function (group) {\n                  return group.id === 1 || group.id === 5;\n                }); // 如果当前用户不是管理员组(id 1或5)，过滤掉id为5的用户\n\n                if (!isAdminUser && res.items && res.items.length > 0) {\n                  // 过滤掉组id为5的用户\n                  res.items = res.items.filter(function (user) {\n                    // 检查用户是否属于id为5的组\n                    return !user.groups.some(function (group) {\n                      return group.id === 5;\n                    });\n                  }); // 更新总数\n\n                  res.total = res.items.length;\n                }\n\n                this.loading = false;\n                this.tableData = this.shuffleList(res.items);\n                this.total_nums = res.total;\n                _context.next = 21;\n                break;\n\n              case 17:\n                _context.prev = 17;\n                _context.t0 = _context[\"catch\"](1);\n                this.loading = false;\n                console.log(_context.t0);\n\n              case 21:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 17]]);\n      }));\n\n      function getAdminUsers() {\n        return _getAdminUsers.apply(this, arguments);\n      }\n\n      return getAdminUsers;\n    }(),\n    // 获取所有分组\n    // 获取所有分组\n    getAllGroups: function () {\n      var _getAllGroups = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var currentUser, userGroups, isAdminUser, allGroups;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                this.loading = true; // 获取当前用户的组ID\n\n                _context2.next = 4;\n                return User.getInformation();\n\n              case 4:\n                currentUser = _context2.sent;\n                userGroups = currentUser.groups || [];\n                isAdminUser = userGroups.some(function (group) {\n                  return group.id === 1 || group.id === 5;\n                }); // 获取所有分组\n\n                _context2.next = 9;\n                return Admin.getAllGroups();\n\n              case 9:\n                allGroups = _context2.sent;\n\n                // 过滤分组\n                if (!isAdminUser) {\n                  this.groups = allGroups.filter(function (group) {\n                    return group.id !== 5;\n                  });\n                } else {\n                  this.groups = allGroups;\n                }\n\n                this.loading = false;\n                _context2.next = 18;\n                break;\n\n              case 14:\n                _context2.prev = 14;\n                _context2.t0 = _context2[\"catch\"](0);\n                this.loading = false;\n                console.log(_context2.t0);\n\n              case 18:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 14]]);\n      }));\n\n      function getAllGroups() {\n        return _getAllGroups.apply(this, arguments);\n      }\n\n      return getAllGroups;\n    }(),\n    // 获取所拥有的权限并渲染  由子组件提供\n    handleEdit: function () {\n      var _handleEdit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(val) {\n        var selectedData;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this.editIndex = val.index;\n\n                // 单击 编辑按键\n                if (val.index >= 0) {\n                  selectedData = val.row;\n                } else {\n                  // 单击 table row\n                  selectedData = val;\n                }\n\n                this.id = selectedData.id;\n                this.form.tel = selectedData.tel;\n                this.form.username = selectedData.username;\n                this.form.email = selectedData.email;\n                this.form.group_ids = selectedData.groups;\n                this.dialogFormVisible = true;\n\n              case 8:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function handleEdit(_x) {\n        return _handleEdit.apply(this, arguments);\n      }\n\n      return handleEdit;\n    }(),\n    // 下拉框选择分组\n    handleChange: function () {\n      var _handleChange = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                this.currentPage = 1;\n                this.loading = true;\n                _context4.next = 4;\n                return this.getAdminUsers();\n\n              case 4:\n                this.loading = false;\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function handleChange() {\n        return _handleChange.apply(this, arguments);\n      }\n\n      return handleChange;\n    }(),\n    // 切换table页\n    handleCurrentChange: function () {\n      var _handleCurrentChange = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(val) {\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                this.currentPage = val;\n                this.loading = true;\n                _context5.next = 4;\n                return this.getAdminUsers('changePage');\n\n              case 4:\n                this.loading = false;\n\n              case 5:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function handleCurrentChange(_x2) {\n        return _handleCurrentChange.apply(this, arguments);\n      }\n\n      return handleCurrentChange;\n    }(),\n    handleDelete: function handleDelete(val) {\n      var _this = this;\n\n      var res;\n      this.$confirm('此操作将永久删除该用户, 是否继续?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.prev = 0;\n                _this.loading = true;\n                _context6.next = 4;\n                return Admin.deleteOneUser(val.row.id);\n\n              case 4:\n                res = _context6.sent;\n                _context6.next = 11;\n                break;\n\n              case 7:\n                _context6.prev = 7;\n                _context6.t0 = _context6[\"catch\"](0);\n                _this.loading = false;\n                console.log(_context6.t0);\n\n              case 11:\n                if (!(res.code < window.MAX_SUCCESS_CODE)) {\n                  _context6.next = 19;\n                  break;\n                }\n\n                _this.loading = false;\n\n                if (_this.total_nums % _this.pageCount === 1 && _this.currentPage !== 1) {\n                  // 判断删除的是不是每一页的最后一条数据\n                  _this.currentPage--;\n                }\n\n                _context6.next = 16;\n                return _this.getAdminUsers();\n\n              case 16:\n                _this.$message({\n                  type: 'success',\n                  message: \"\".concat(res.message)\n                });\n\n                _context6.next = 21;\n                break;\n\n              case 19:\n                _this.loading = false;\n\n                _this.$message.error(\"\".concat(res.message));\n\n              case 21:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, null, [[0, 7]]);\n      })));\n    },\n    // 提交表单信息\n    confirmEdit: function () {\n      var _confirmEdit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                if (!(this.activeTab === '修改信息')) {\n                  _context7.next = 5;\n                  break;\n                }\n\n                _context7.next = 3;\n                return this.$refs.userInfo.submitForm('form');\n\n              case 3:\n                _context7.next = 7;\n                break;\n\n              case 5:\n                _context7.next = 7;\n                return this.$refs.password.submitForm('form');\n\n              case 7:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function confirmEdit() {\n        return _confirmEdit.apply(this, arguments);\n      }\n\n      return confirmEdit;\n    }(),\n    // 重置\n    resetForm: function resetForm() {\n      if (this.activeTab === '修改信息') {\n        this.$refs.userInfo.resetForm('form');\n      } else {\n        this.$refs.password.resetForm('form');\n      }\n    },\n    // 双击 table ro\n    rowClick: function rowClick(row) {\n      this.handleEdit(row);\n    },\n    // 弹框 右上角 X\n    handleClose: function handleClose(done) {\n      this.dialogFormVisible = false;\n      done();\n    },\n    // 切换tab栏\n    handleClick: function handleClick(tab) {\n      this.activeTab = tab.name;\n    },\n    // 监听子组件更新用户信息是否成功\n    handleInfoResult: function () {\n      var _handleInfoResult = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(flag) {\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                this.dialogFormVisible = false;\n\n                if (flag === true) {\n                  this.getAdminUsers();\n                }\n\n              case 2:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function handleInfoResult(_x3) {\n        return _handleInfoResult.apply(this, arguments);\n      }\n\n      return handleInfoResult;\n    }(),\n    // 监听子组件更新密码是否成功\n    handlePasswordResult: function handlePasswordResult(result) {\n      if (result === true) {\n        this.dialogFormVisible = false;\n      }\n    },\n    // 监听添加用户是否成功\n    addUser: function () {\n      var _addUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(flag) {\n        var _this2 = this;\n\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                if (!(flag === true)) {\n                  _context9.next = 6;\n                  break;\n                }\n\n                if (this.total_nums % this.pageCount === 0) {\n                  // 判断当前页的数据是不是满了，需要增加新的页码\n                  this.currentPage++;\n                }\n\n                _context9.next = 4;\n                return this.getAdminUsers();\n\n              case 4:\n                this.refreshPagination = false; // 刷新pagination组件\n\n                this.$nextTick(function () {\n                  _this2.refreshPagination = true;\n                });\n\n              case 6:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function addUser(_x4) {\n        return _addUser.apply(this, arguments);\n      }\n\n      return addUser;\n    }(),\n    shuffleList: function shuffleList(users) {\n      var list = [];\n      users.forEach(function (element) {\n        var groups = [];\n        element.groups.forEach(function (item) {\n          groups.push(item.name);\n        });\n        element.groupNames = groups.join(',');\n        list.push(element);\n      });\n      return list;\n    }\n  },\n  created: function () {\n    var _created = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {\n      return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              _context10.next = 2;\n              return this.getAdminUsers();\n\n            case 2:\n              this.getAllGroups();\n              this.tableColumn = [{\n                prop: 'username',\n                label: '名称'\n              }, {\n                prop: 'groupNames',\n                label: '所属角色'\n              }]; // 设置表头信息\n\n              this.operate = [{\n                name: '编辑',\n                func: 'handleEdit',\n                type: 'primary'\n              }, {\n                name: '删除',\n                func: 'handleDelete',\n                type: 'danger'\n              }];\n              this.eventBus.$on('addUser', this.addUser);\n\n            case 6:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10, this);\n    }));\n\n    function created() {\n      return _created.apply(this, arguments);\n    }\n\n    return created;\n  }(),\n  beforeDestroy: function beforeDestroy() {\n    this.eventBus.$off('addUser', this.addUser);\n  }\n};",{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CA;AACA;AACA;AACA;AACA;AAEA;EACAA;IAAAC;IAAAC;IAAAC;EAAA,CADA;EAEAC,oBAFA;EAGAC,IAHA,kBAGA;IACA;MACAC,KADA;MACA;MACAC,uBAFA;MAEA;MACAC,eAHA;MAGA;MACAC,aAJA;MAIA;MACAC,cALA;MAKA;MACAC,aANA;MAMA;MACAC,aAPA;MAOA;MACAC,eARA;MAQA;MACAC,WATA;MASA;MACAC,wBAVA;MAUA;MACAC,eAXA;MAWA;MACAC,UAZA;MAYA;MACAC,mBAbA;MAcAC,iBAdA;MAeAC;QACA;QACAC,YAFA;QAGAC,YAHA;QAIAC,oBAJA;QAKAC,SALA;QAMAC,OANA;QAOAC;MAPA,CAfA;MAwBAC;IAxBA;EA0BA,CA9BA;EA+BAC;IACA;IACA;IACAC,aAHA;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAKAnB,WALA,GAKA,oBALA;gBAAA;gBAOA;gBAPA;gBAAA,OAQAoB;kBAAAZ;kBAAAa;kBAAAC;gBAAA,EARA;;cAAA;gBAQAC,GARA;gBAAA;gBAAA,OAWAC,qBAXA;;cAAA;gBAWAC,WAXA;gBAYAC,UAZA,GAYAD,wBAZA;gBAaAE,WAbA,GAaAD;kBAAA;gBAAA,EAbA,EAeA;;gBACA;kBACA;kBACAH;oBACA;oBACA;sBAAA;oBAAA;kBACA,CAHA,EAFA,CAMA;;kBACAA;gBACA;;gBAEA;gBACA;gBACA;gBA5BA;gBAAA;;cAAA;gBAAA;gBAAA;gBA8BA;gBACAK;;cA/BA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;;MAAA;QAAA;MAAA;;MAAA;IAAA;IAkCA;IAEA;IACAC,YArCA;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAuCA,oBAvCA,CAwCA;;gBAxCA;gBAAA,OAyCAL,qBAzCA;;cAAA;gBAyCAC,WAzCA;gBA0CAC,UA1CA,GA0CAD,wBA1CA;gBA2CAE,WA3CA,GA2CAD;kBAAA;gBAAA,EA3CA,EA6CA;;gBA7CA;gBAAA,OA8CAN,oBA9CA;;cAAA;gBA8CAU,SA9CA;;gBA+CA;gBACA;kBACA;oBAAA;kBAAA;gBACA,CAFA,MAEA;kBACA;gBACA;;gBACA;gBArDA;gBAAA;;cAAA;gBAAA;gBAAA;gBAuDA;gBACAF;;cAxDA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;;MAAA;QAAA;MAAA;;MAAA;IAAA;IA2DA;IACAG,UA5DA;MAAA,+FA4DAC,GA5DA;QAAA;QAAA;UAAA;YAAA;cAAA;gBA6DA;;gBAEA;gBACA;kBACAC;gBACA,CAFA,MAEA;kBACA;kBACAA;gBACA;;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;;cA3EA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;;MAAA;QAAA;MAAA;;MAAA;IAAA;IA6EA;IACAC,YA9EA;MAAA;QAAA;UAAA;YAAA;cAAA;gBA+EA;gBACA;gBAhFA;gBAAA,OAiFA,oBAjFA;;cAAA;gBAkFA;;cAlFA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;;MAAA;QAAA;MAAA;;MAAA;IAAA;IAoFA;IACAC,mBArFA;MAAA,wGAqFAH,GArFA;QAAA;UAAA;YAAA;cAAA;gBAsFA;gBACA;gBAvFA;gBAAA,OAwFA,gCAxFA;;cAAA;gBAyFA;;cAzFA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;;MAAA;QAAA;MAAA;;MAAA;IAAA;IA2FAI,YA3FA,wBA2FAJ,GA3FA,EA2FA;MAAA;;MACA;MACA;QACAK,uBADA;QAEAC,sBAFA;QAGAC;MAHA,GAIAC,IAJA,0EAIA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAEA;gBAFA;gBAAA,OAGApB,+BAHA;;cAAA;gBAGAG,GAHA;gBAAA;gBAAA;;cAAA;gBAAA;gBAAA;gBAKA;gBACAK;;cANA;gBAAA,MAQAL,kCARA;kBAAA;kBAAA;gBAAA;;gBASA;;gBACA;kBACA;kBACA;gBACA;;gBAbA;gBAAA,OAcA,qBAdA;;cAAA;gBAeA;kBACAgB,eADA;kBAEAE;gBAFA;;gBAfA;gBAAA;;cAAA;gBAoBA;;gBACA;;cArBA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAJA;IA4BA,CAzHA;IA0HA;IACAC,WA3HA;MAAA;QAAA;UAAA;YAAA;cAAA;gBAAA,MA4HA,yBA5HA;kBAAA;kBAAA;gBAAA;;gBAAA;gBAAA,OA6HA,sCA7HA;;cAAA;gBAAA;gBAAA;;cAAA;gBAAA;gBAAA,OA+HA,sCA/HA;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;;MAAA;QAAA;MAAA;;MAAA;IAAA;IAkIA;IACAC,SAnIA,uBAmIA;MACA;QACA;MACA,CAFA,MAEA;QACA;MACA;IACA,CAzIA;IA0IA;IACAC,QA3IA,oBA2IAC,GA3IA,EA2IA;MACA;IACA,CA7IA;IA8IA;IACAC,WA/IA,uBA+IAC,IA/IA,EA+IA;MACA;MACAA;IACA,CAlJA;IAmJA;IACAC,WApJA,uBAoJAC,GApJA,EAoJA;MACA;IACA,CAtJA;IAuJA;IACAC,gBAxJA;MAAA,qGAwJAC,IAxJA;QAAA;UAAA;YAAA;cAAA;gBAyJA;;gBACA;kBACA;gBACA;;cA5JA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;;MAAA;QAAA;MAAA;;MAAA;IAAA;IA8JA;IACAC,oBA/JA,gCA+JAC,MA/JA,EA+JA;MACA;QACA;MACA;IACA,CAnKA;IAoKA;IACAC,OArKA;MAAA,4FAqKAH,IArKA;QAAA;;QAAA;UAAA;YAAA;cAAA;gBAAA,MAsKAA,aAtKA;kBAAA;kBAAA;gBAAA;;gBAuKA;kBACA;kBACA;gBACA;;gBA1KA;gBAAA,OA2KA,oBA3KA;;cAAA;gBA4KA,+BA5KA,CA4KA;;gBACA;kBACA;gBACA,CAFA;;cA7KA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;;MAAA;QAAA;MAAA;;MAAA;IAAA;IAkLAI,WAlLA,uBAkLAC,KAlLA,EAkLA;MACA;MACAA;QACA;QACAC;UACAlD;QACA,CAFA;QAGAkD;QACAC;MACA,CAPA;MAQA;IACA;EA7LA,CA/BA;EA8NAC,OA9NA;IAAA;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA,OA+NA,oBA/NA;;YAAA;cAgOA;cACA,oBACA;gBAAAC;gBAAAC;cAAA,CADA,EAEA;gBAAAD;gBAAAC;cAAA,CAFA,EAjOA,CAoOA;;cACA,gBACA;gBAAAC;gBAAAC;gBAAAxB;cAAA,CADA,EAEA;gBAAAuB;gBAAAC;gBAAAxB;cAAA,CAFA;cAIA;;YAzOA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;;IAAA;MAAA;IAAA;;IAAA;EAAA;EA2OAyB,aA3OA,2BA2OA;IACA;EACA;AA7OA","names":["components","LinTable","UserInfo","UserPassword","inject","data","id","refreshPagination","editIndex","total_nums","currentPage","pageCount","tableData","tableColumn","operate","dialogFormVisible","selectGroup","groups","group_id","activeTab","form","username","password","confirm_password","email","tel","group_ids","loading","methods","getAdminUsers","Admin","count","page","res","User","currentUser","userGroups","isAdminUser","console","getAllGroups","allGroups","handleEdit","val","selectedData","handleChange","handleCurrentChange","handleDelete","confirmButtonText","cancelButtonText","type","then","message","confirmEdit","resetForm","rowClick","row","handleClose","done","handleClick","tab","handleInfoResult","flag","handlePasswordResult","result","addUser","shuffleList","users","element","list","created","prop","label","name","func","beforeDestroy"],"sourceRoot":"src/view/admin/user","sources":["user-list.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <div class=\"header\">\n      <div class=\"title\">用户列表</div>\n      <!-- 分组选择下拉框 -->\n      <el-select size=\"medium\" filterable v-model=\"group_id\" placeholder=\"请选择角色\" @change=\"handleChange\" clearable>\n        <el-option v-for=\"(group, index) in groups\" :key=\"index\" :label=\"group.name\" :value=\"group.id\"></el-option>\n      </el-select>\n    </div>\n    <!-- 表格 -->\n    <lin-table :tableColumn=\"tableColumn\" :tableData=\"tableData\" :operate=\"operate\" @handleEdit=\"handleEdit\"\n      @handleDelete=\"handleDelete\" @row-click=\"rowClick\" v-loading=\"loading\"></lin-table>\n    <!-- 分页 -->\n    <div class=\"pagination\">\n      <el-pagination @current-change=\"handleCurrentChange\" :background=\"true\" :page-size=\"pageCount\"\n        :current-page=\"currentPage\" v-if=\"refreshPagination\" layout=\"prev, pager, next, jumper\" :total=\"total_nums\">\n      </el-pagination>\n    </div>\n    <!-- 弹窗 -->\n    <el-dialog title=\"用户信息\" :append-to-body=\"true\" :before-close=\"handleClose\" :visible.sync=\"dialogFormVisible\">\n      <div style=\"margin-top:-25px;\">\n        <el-tabs v-model=\"activeTab\" @tab-click=\"handleClick\">\n          <el-tab-pane label=\"修改信息\" name=\"修改信息\">\n            <user-info ref=\"userInfo\" v-if=\"dialogFormVisible\" @handleInfoResult=\"handleInfoResult\"\n              labelPosition=\"right\" pageType=\"edit\" :id=\"id\" :groups=\"groups\" :info=\"form\" :submit=\"false\"\n              class=\"info\" />\n          </el-tab-pane>\n          <el-tab-pane label=\"修改密码\" name=\"修改密码\">\n            <user-password @handlePasswordResult=\"handlePasswordResult\" ref=\"password\" :id=\"id\" class=\"password\" />\n          </el-tab-pane>\n        </el-tabs>\n      </div>\n      <!-- 按键操作 -->\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button type=\"primary\" @click=\"confirmEdit\">确 定</el-button>\n        <el-button @click=\"resetForm\">重 置</el-button>\n      </div>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport Admin from '@/lin/model/admin'\nimport LinTable from '@/component/base/table/lin-table'\nimport User from '@/lin/model/user'\nimport UserInfo from './user-info'\nimport UserPassword from './user-password'\n\nexport default {\n  components: { LinTable, UserInfo, UserPassword },\n  inject: ['eventBus'],\n  data() {\n    return {\n      id: 0, // 用户id\n      refreshPagination: true, // 页数增加的时候，因为缓存的缘故，需要刷新Pagination组件\n      editIndex: null, // 编辑的行\n      total_nums: 0, // 分组内的用户总数\n      currentPage: 1, // 默认获取第一页的数据\n      pageCount: 10, // 每页10条数据\n      tableData: [], // 表格数据\n      tableColumn: [], // 表头数据\n      operate: [], // 表格按键操作区\n      dialogFormVisible: false, // 控制弹窗显示\n      selectGroup: '', // 选中的分组Id\n      groups: [], // 所有分组\n      group_id: undefined,\n      activeTab: '修改信息',\n      form: {\n        // 表单信息\n        username: '',\n        password: '',\n        confirm_password: '',\n        email: '',\n        tel: '',\n        group_ids: [],\n      },\n      loading: false,\n    }\n  },\n  methods: {\n    // 根据分组 刷新/获取分组内的用户\n// 根据分组 刷新/获取分组内的用户\nasync getAdminUsers() {\n  let res\n  const currentPage = this.currentPage - 1\n  try {\n    this.loading = true\n    res = await Admin.getAdminUsers({ group_id: this.group_id, count: this.pageCount, page: currentPage }) // eslint-disable-line\n    \n    // 获取当前用户的信息\n    const currentUser = await User.getInformation()\n    const userGroups = currentUser.groups || []\n    const isAdminUser = userGroups.some(group => group.id === 1 || group.id === 5)\n    \n    // 如果当前用户不是管理员组(id 1或5)，过滤掉id为5的用户\n    if (!isAdminUser && res.items && res.items.length > 0) {\n      // 过滤掉组id为5的用户\n      res.items = res.items.filter(user => {\n        // 检查用户是否属于id为5的组\n        return !user.groups.some(group => group.id === 5)\n      })\n      // 更新总数\n      res.total = res.items.length\n    }\n    \n    this.loading = false\n    this.tableData = this.shuffleList(res.items)\n    this.total_nums = res.total\n  } catch (e) {\n    this.loading = false\n    console.log(e)\n  }\n},\n    // 获取所有分组\n\n// 获取所有分组\nasync getAllGroups() {\n  try {\n    this.loading = true\n    // 获取当前用户的组ID\n    const currentUser = await User.getInformation()\n    const userGroups = currentUser.groups || []\n    const isAdminUser = userGroups.some(group => group.id === 1 || group.id === 5)\n    \n    // 获取所有分组\n    const allGroups = await Admin.getAllGroups()\n    // 过滤分组\n    if (!isAdminUser) {\n      this.groups = allGroups.filter(group => group.id !== 5)\n    } else {\n      this.groups = allGroups\n    }\n    this.loading = false\n  } catch (e) {\n    this.loading = false\n    console.log(e)\n  }\n},\n    // 获取所拥有的权限并渲染  由子组件提供\n    async handleEdit(val) {\n      this.editIndex = val.index\n      let selectedData\n      // 单击 编辑按键\n      if (val.index >= 0) {\n        selectedData = val.row\n      } else {\n        // 单击 table row\n        selectedData = val\n      }\n      this.id = selectedData.id\n      this.form.tel = selectedData.tel\n      this.form.username = selectedData.username\n      this.form.email = selectedData.email\n      this.form.group_ids = selectedData.groups\n      this.dialogFormVisible = true\n    },\n    // 下拉框选择分组\n    async handleChange() {\n      this.currentPage = 1\n      this.loading = true\n      await this.getAdminUsers()\n      this.loading = false\n    },\n    // 切换table页\n    async handleCurrentChange(val) {\n      this.currentPage = val\n      this.loading = true\n      await this.getAdminUsers('changePage')\n      this.loading = false\n    },\n    handleDelete(val) {\n      let res\n      this.$confirm('此操作将永久删除该用户, 是否继续?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning',\n      }).then(async () => {\n        try {\n          this.loading = true\n          res = await Admin.deleteOneUser(val.row.id)\n        } catch (e) {\n          this.loading = false\n          console.log(e)\n        }\n        if (res.code < window.MAX_SUCCESS_CODE) {\n          this.loading = false\n          if (this.total_nums % this.pageCount === 1 && this.currentPage !== 1) {\n            // 判断删除的是不是每一页的最后一条数据\n            this.currentPage--\n          }\n          await this.getAdminUsers()\n          this.$message({\n            type: 'success',\n            message: `${res.message}`,\n          })\n        } else {\n          this.loading = false\n          this.$message.error(`${res.message}`)\n        }\n      })\n    },\n    // 提交表单信息\n    async confirmEdit() {\n      if (this.activeTab === '修改信息') {\n        await this.$refs.userInfo.submitForm('form')\n      } else {\n        await this.$refs.password.submitForm('form')\n      }\n    },\n    // 重置\n    resetForm() {\n      if (this.activeTab === '修改信息') {\n        this.$refs.userInfo.resetForm('form')\n      } else {\n        this.$refs.password.resetForm('form')\n      }\n    },\n    // 双击 table ro\n    rowClick(row) {\n      this.handleEdit(row)\n    },\n    // 弹框 右上角 X\n    handleClose(done) {\n      this.dialogFormVisible = false\n      done()\n    },\n    // 切换tab栏\n    handleClick(tab) {\n      this.activeTab = tab.name\n    },\n    // 监听子组件更新用户信息是否成功\n    async handleInfoResult(flag) {\n      this.dialogFormVisible = false\n      if (flag === true) {\n        this.getAdminUsers()\n      }\n    },\n    // 监听子组件更新密码是否成功\n    handlePasswordResult(result) {\n      if (result === true) {\n        this.dialogFormVisible = false\n      }\n    },\n    // 监听添加用户是否成功\n    async addUser(flag) {\n      if (flag === true) {\n        if (this.total_nums % this.pageCount === 0) {\n          // 判断当前页的数据是不是满了，需要增加新的页码\n          this.currentPage++\n        }\n        await this.getAdminUsers()\n        this.refreshPagination = false // 刷新pagination组件\n        this.$nextTick(() => {\n          this.refreshPagination = true\n        })\n      }\n    },\n    shuffleList(users) {\n      const list = []\n      users.forEach(element => {\n        const groups = []\n        element.groups.forEach(item => {\n          groups.push(item.name)\n        })\n        element.groupNames = groups.join(',')\n        list.push(element)\n      })\n      return list\n    },\n  },\n  async created() {\n    await this.getAdminUsers()\n    this.getAllGroups()\n    this.tableColumn = [\n      { prop: 'username', label: '名称' },\n      { prop: 'groupNames', label: '所属角色' },\n    ] // 设置表头信息\n    this.operate = [\n      { name: '编辑', func: 'handleEdit', type: 'primary' },\n      { name: '删除', func: 'handleDelete', type: 'danger' },\n    ]\n    this.eventBus.$on('addUser', this.addUser)\n  },\n  beforeDestroy() {\n    this.eventBus.$off('addUser', this.addUser)\n  },\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.container {\n  padding: 0 30px;\n\n  .header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n\n    .title {\n      height: 59px;\n      line-height: 59px;\n      color: $parent-title-color;\n      font-size: 16px;\n      font-weight: 500;\n    }\n  }\n\n  .pagination {\n    display: flex;\n    justify-content: flex-end;\n    margin: 20px;\n  }\n}\n\n.info {\n  margin-left: -55px;\n  margin-bottom: -30px;\n}\n\n.password {\n  margin-top: 20px;\n  margin-left: -55px;\n  margin-bottom: -20px;\n}\n</style>\n"]}]}