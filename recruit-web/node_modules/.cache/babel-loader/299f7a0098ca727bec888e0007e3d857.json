{"remainingRequest":"D:\\recruit\\recruit-system\\recruit-web\\node_modules\\thread-loader\\dist\\cjs.js!D:\\recruit\\recruit-system\\recruit-web\\node_modules\\babel-loader\\lib\\index.js!D:\\recruit\\recruit-system\\recruit-web\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\recruit\\recruit-system\\recruit-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\recruit\\recruit-system\\recruit-web\\src\\view\\resume\\resume-modify.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\recruit\\recruit-system\\recruit-web\\src\\view\\resume\\resume-modify.vue","mtime":1706286066000},{"path":"D:\\recruit\\recruit-system\\recruit-web\\babel.config.js","mtime":1706286066000},{"path":"D:\\recruit\\recruit-system\\recruit-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\recruit\\recruit-system\\recruit-web\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\recruit\\recruit-system\\recruit-web\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\recruit\\recruit-system\\recruit-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\recruit\\recruit-system\\recruit-web\\node_modules\\vue-loader\\lib\\index.js","mtime":1655715099000}],"contextDependencies":[],"result":["function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == _typeof(value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { Resume } from '@/model/resume';\nimport ResumeCreate from '@/view/resume/resume-create';\nimport Detail from './detail.vue';\nexport default {\n  components: {\n    ResumeCreate: ResumeCreate,\n    Detail: Detail\n  },\n  data: function data() {\n    return {\n      isRouterAlive: true,\n      tabPosition: 'right',\n      resumeId: \"\",\n      loading: false,\n      form: {},\n      showCreate: false,\n      educations: [{\n        id: \"\",\n        name: \"\",\n        start_time: \"\",\n        end_time: \"\",\n        major: \"\",\n        diploma: \"\",\n        descriptions: \"\"\n      }],\n      experiences: [{\n        id: \"\",\n        name: \"\",\n        start_time: \"\",\n        end_time: \"\",\n        position: \"\",\n        performance: \"\"\n      }],\n      projects: [{\n        id: \"\",\n        name: \"\",\n        start_time: \"\",\n        end_time: \"\",\n        position: \"\",\n        background: \"\",\n        performance: \"\"\n      }],\n      eduoptions: [{\n        value: 0,\n        label: '高中'\n      }, {\n        value: 1,\n        label: '大学专科'\n      }, {\n        value: 2,\n        label: '大学本科'\n      }, {\n        value: 3,\n        label: '硕士研究生'\n      }, {\n        value: 4,\n        label: '博士研究生'\n      }]\n    };\n  },\n  mounted: function () {\n    var _mounted = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var _this = this;\n\n      var res;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              this.loading = true;\n              _context.next = 4;\n              return Resume.getByUserId(this.$store.getters.user.id);\n\n            case 4:\n              res = _context.sent;\n\n              if (res.resume_id) {\n                _context.next = 9;\n                break;\n              }\n\n              this.$message.warning(\"还未创建简历，即将为您进入简历创建页面\");\n              setTimeout(function () {\n                // 还未创建简历，会来到简历创建页面\n                _this.showCreate = true;\n              }, 2000);\n              return _context.abrupt(\"return\");\n\n            case 9:\n              this.resumeId = res.resume_id + \"\";\n              this.form = res;\n              this.educations = res.educations;\n              this.experiences = res.experiences;\n              this.projects = res.projects;\n              this.loading = false;\n              _context.next = 22;\n              break;\n\n            case 17:\n              _context.prev = 17;\n              _context.t0 = _context[\"catch\"](0);\n              this.loading = false;\n              console.log(_context.t0); // 还未创建简历，会来到简历创建页面\n\n              this.showCreate = true;\n\n            case 22:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this, [[0, 17]]);\n    }));\n\n    function mounted() {\n      return _mounted.apply(this, arguments);\n    }\n\n    return mounted;\n  }(),\n  methods: {\n    reload: function reload() {\n      var _this2 = this;\n\n      this.isRouterAlive = true;\n      this.$nextTick(function () {\n        return _this2.isRouterAlive = true;\n      });\n    },\n    // 教育经历操作\n    updateEducation: function () {\n      var _updateEducation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(row) {\n        var res, _res;\n\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(row.id !== \"\")) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                _context2.next = 3;\n                return Resume.updateEducation(row);\n\n              case 3:\n                res = _context2.sent;\n\n                if (res.code === 1010) {\n                  this.$message.success(\"更新成功\");\n                  this.reload();\n                } else {\n                  this.$message.error(\"更新失败\");\n                }\n\n                _context2.next = 11;\n                break;\n\n              case 7:\n                _context2.next = 9;\n                return Resume.createEducation(row);\n\n              case 9:\n                _res = _context2.sent;\n\n                if (_res.code === 1000) {\n                  this.$message.success(\"保存成功\");\n                  this.reload();\n                } else {\n                  this.$message.error(\"保存失败\");\n                }\n\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function updateEducation(_x) {\n        return _updateEducation.apply(this, arguments);\n      }\n\n      return updateEducation;\n    }(),\n    delEducation: function () {\n      var _delEducation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(row) {\n        var res;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!(row.id !== \"\")) {\n                  _context3.next = 5;\n                  break;\n                }\n\n                _context3.next = 3;\n                return Resume.delEducation(row.id);\n\n              case 3:\n                res = _context3.sent;\n\n                if (res.code === 2000) {\n                  this.$message.success(\"删除成功\");\n                  this.reload();\n                } else {\n                  this.$message.error(\"删除失败\");\n                }\n\n              case 5:\n                this.educations.pop(row);\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function delEducation(_x2) {\n        return _delEducation.apply(this, arguments);\n      }\n\n      return delEducation;\n    }(),\n    addEducation: function addEducation() {\n      this.educations.push({\n        resume_id: this.resumeId,\n        id: \"\",\n        name: \"\",\n        start_time: \"\",\n        end_time: \"\",\n        major: \"\",\n        diploma: \"\",\n        descriptions: \"\"\n      });\n    },\n    // 项目经历操作\n    updateProject: function () {\n      var _updateProject = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(row) {\n        var res, _res2;\n\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (!(row.id !== \"\")) {\n                  _context4.next = 7;\n                  break;\n                }\n\n                _context4.next = 3;\n                return Resume.updateProject(row);\n\n              case 3:\n                res = _context4.sent;\n\n                if (res.code === 1010) {\n                  this.$message.success(\"更新成功\");\n                  this.reload();\n                } else {\n                  this.$message.error(\"更新失败\");\n                }\n\n                _context4.next = 11;\n                break;\n\n              case 7:\n                _context4.next = 9;\n                return Resume.createProject(row);\n\n              case 9:\n                _res2 = _context4.sent;\n\n                if (_res2.code === 1000) {\n                  this.$message.success(\"保存成功\");\n                  this.reload();\n                } else {\n                  this.$message.error(\"保存失败\");\n                }\n\n              case 11:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function updateProject(_x3) {\n        return _updateProject.apply(this, arguments);\n      }\n\n      return updateProject;\n    }(),\n    delProject: function () {\n      var _delProject = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(row) {\n        var res;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (!(row.id !== \"\")) {\n                  _context5.next = 5;\n                  break;\n                }\n\n                _context5.next = 3;\n                return Resume.delProject(row.id);\n\n              case 3:\n                res = _context5.sent;\n\n                if (res.code === 2000) {\n                  this.reload();\n                  this.$message.success(\"删除成功\");\n                } else {\n                  this.$message.error(\"删除失败\");\n                }\n\n              case 5:\n                this.projects.pop(row);\n\n              case 6:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function delProject(_x4) {\n        return _delProject.apply(this, arguments);\n      }\n\n      return delProject;\n    }(),\n    addProject: function addProject() {\n      this.projects.push({\n        resume_id: this.resumeId,\n        id: \"\",\n        name: \"\",\n        start_time: \"\",\n        end_time: \"\",\n        position: \"\",\n        background: '',\n        performance: \"\"\n      });\n    },\n    // 工作经历操作\n    updateExperience: function () {\n      var _updateExperience = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(row) {\n        var res, _res3;\n\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                if (!(row.id !== \"\")) {\n                  _context6.next = 7;\n                  break;\n                }\n\n                _context6.next = 3;\n                return Resume.updateExperience(row);\n\n              case 3:\n                res = _context6.sent;\n\n                if (res.code === 1010) {\n                  this.$message.success(\"更新成功\");\n                  this.reload();\n                } else {\n                  this.$message.error(\"更新失败\");\n                }\n\n                _context6.next = 11;\n                break;\n\n              case 7:\n                _context6.next = 9;\n                return Resume.createExperience(row);\n\n              case 9:\n                _res3 = _context6.sent;\n\n                if (_res3.code === 1000) {\n                  this.$message.success(\"保存成功\");\n                  this.reload();\n                } else {\n                  this.$message.error(\"保存失败\");\n                }\n\n              case 11:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function updateExperience(_x5) {\n        return _updateExperience.apply(this, arguments);\n      }\n\n      return updateExperience;\n    }(),\n    delExperience: function () {\n      var _delExperience = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(row) {\n        var res;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                if (!(row.id !== \"\")) {\n                  _context7.next = 5;\n                  break;\n                }\n\n                _context7.next = 3;\n                return Resume.delExperience(row.id);\n\n              case 3:\n                res = _context7.sent;\n\n                if (res.code === 2000) {\n                  this.$message.success(\"删除成功\");\n                  this.reload();\n                } else {\n                  this.$message.error(\"删除失败\");\n                }\n\n              case 5:\n                this.experiences.pop(row);\n\n              case 6:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function delExperience(_x6) {\n        return _delExperience.apply(this, arguments);\n      }\n\n      return delExperience;\n    }(),\n    addExperience: function addExperience() {\n      this.experiences.push({\n        resume_id: this.resumeId,\n        id: \"\",\n        name: \"\",\n        start_time: \"\",\n        end_time: \"\",\n        position: \"\",\n        performance: \"\"\n      });\n    },\n    submitForm: function () {\n      var _submitForm = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n        var res, result;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                // 获取到当前登录求职者的用户id\n                this.form.user_id = this.$store.getters.user.id;\n                _context8.next = 3;\n                return Resume.update(this.form.user_id, this.form);\n\n              case 3:\n                res = _context8.sent;\n\n                if (res.code < window.MAX_SUCCESS_CODE) {\n                  this.$message.success(\"\".concat(res.message));\n                } // 刷新页面，获取修改后的最新信息\n\n\n                this.loading = true;\n                _context8.next = 8;\n                return Resume.getByUserId(this.$store.getters.user.id);\n\n              case 8:\n                result = _context8.sent;\n                this.form = result;\n                this.loading = false;\n\n              case 11:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function submitForm() {\n        return _submitForm.apply(this, arguments);\n      }\n\n      return submitForm;\n    }(),\n    // 重置表单\n    resetForm: function resetForm(formName) {\n      this.$refs[formName].resetFields();\n    },\n    createClose: function () {\n      var _createClose = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n        var res;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                this.showCreate = false; // 再次访问接口填充表单数据\n\n                this.loading = true;\n                _context9.next = 4;\n                return Resume.getByUserId(this.$store.getters.user.id);\n\n              case 4:\n                res = _context9.sent;\n                this.form = res;\n                this.loading = false;\n\n              case 7:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function createClose() {\n        return _createClose.apply(this, arguments);\n      }\n\n      return createClose;\n    }(),\n    getResumeInfo: function () {\n      var _getResumeInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {\n        var res;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.prev = 0;\n                this.loading = true;\n                _context10.next = 4;\n                return Resume.getByUserId(this.$store.getters.user.id);\n\n              case 4:\n                res = _context10.sent;\n                this.resumeId = res.resume_id + \"\";\n                console.log(this.resumeId);\n                this.form = res;\n                this.educations = res.educations;\n                this.experiences = res.experiences;\n                this.projects = res.projects;\n                this.$forceUpdate();\n                this.loading = false;\n                _context10.next = 20;\n                break;\n\n              case 15:\n                _context10.prev = 15;\n                _context10.t0 = _context10[\"catch\"](0);\n                this.loading = false;\n                console.log(_context10.t0); // 还未创建简历，会来到简历创建页面\n\n                this.showCreate = true;\n\n              case 20:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this, [[0, 15]]);\n      }));\n\n      function getResumeInfo() {\n        return _getResumeInfo.apply(this, arguments);\n      }\n\n      return getResumeInfo;\n    }()\n  }\n};",null]}