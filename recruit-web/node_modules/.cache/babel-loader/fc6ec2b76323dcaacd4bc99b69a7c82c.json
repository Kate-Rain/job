{"remainingRequest":"D:\\001JavaTools\\001Java项目\\招聘系统\\recruit-system\\recruit-web\\node_modules\\babel-loader\\lib\\index.js!D:\\001JavaTools\\001Java项目\\招聘系统\\recruit-system\\recruit-web\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\001JavaTools\\001Java项目\\招聘系统\\recruit-system\\recruit-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\001JavaTools\\001Java项目\\招聘系统\\recruit-system\\recruit-web\\src\\plugin\\lin-cms-ui\\view\\table\\table-combo.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\001JavaTools\\001Java项目\\招聘系统\\recruit-system\\recruit-web\\src\\plugin\\lin-cms-ui\\view\\table\\table-combo.vue","mtime":1706286066000},{"path":"D:\\001JavaTools\\001Java项目\\招聘系统\\recruit-system\\recruit-web\\babel.config.js","mtime":1706286066000},{"path":"D:\\001JavaTools\\001Java项目\\招聘系统\\recruit-system\\recruit-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\001JavaTools\\001Java项目\\招聘系统\\recruit-system\\recruit-web\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\001JavaTools\\001Java项目\\招聘系统\\recruit-system\\recruit-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\001JavaTools\\001Java项目\\招聘系统\\recruit-system\\recruit-web\\node_modules\\vue-loader\\lib\\index.js","mtime":1655715099000}],"contextDependencies":[],"result":["function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == _typeof(value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport LinSearch from '@/component/base/search/lin-search';\nimport { tableColumn } from './data';\nimport movie from '../../model/movie.js';\nexport default {\n  components: {\n    LinSearch: LinSearch\n  },\n  data: function data() {\n    return {\n      tableData: [],\n      loading: false,\n      Hidden: true,\n      // 默认隐藏自定义排序列\n      searchKeyword: '',\n      // 定制列相关\n      checkList: [],\n      filterTableColumn: [],\n      // 分页相关\n      refreshPagination: true,\n      // 页数增加的时候，因为缓存的缘故，需要刷新Pagination组件\n      currentPage: 1,\n      // 默认获取第一页的数据\n      pageCount: 10,\n      // 每页10条数据\n      total_nums: 180,\n      // 分组内的用户总数\n      // 固定列相关\n      dialogTableVisible: false,\n      fixedLeftList: [],\n      fixedRightList: [],\n      value: '',\n      // 单元格编辑相关\n      editRow: 0,\n      showTooltip: true\n    };\n  },\n  computed: {},\n  created: function created() {\n    var _this = this;\n\n    // 获取数据\n    this._getTableData((this.currentPage - 1) * this.pageCount, this.pageCount);\n\n    this.tableColumn = tableColumn; // 操作栏\n\n    this.operate = [{\n      name: '编辑',\n      func: 'handleEdit',\n      type: 'primary'\n    }, {\n      name: '删除',\n      func: 'handleDelete',\n      type: 'danger'\n    }]; // 定制列\n\n    this.tempCheckList = tableColumn.map(function (v) {\n      return v.label;\n    }).slice();\n    this.checkList = tableColumn.map(function (v) {\n      return v.label;\n    });\n    this.filterTableColumn = tableColumn.filter(function (v) {\n      return _this.checkList.indexOf(v.label) > -1;\n    });\n  },\n  methods: {\n    // 获取数据\n    _getTableData: function _getTableData(start, count) {\n      var res = movie.getTop250(start, count);\n      res.map(function (item) {\n        var temp = item;\n        temp.editFlag = false;\n        return '';\n      });\n      this.tableData = _toConsumableArray(res);\n    },\n    rowClick: function rowClick(val) {\n      console.log(val);\n    },\n    // 定制列\n    handleChange: function handleChange() {\n      var _this2 = this;\n\n      this.filterTableColumn = tableColumn.filter(function (v) {\n        return _this2.checkList.indexOf(v.label) > -1;\n      });\n    },\n    showRowOperateModal: function showRowOperateModal() {},\n    // 变更排序\n    handleSort: function handleSort(val, rowData) {\n      console.log('rowData', rowData);\n      this.$message({\n        type: 'success',\n        message: \"\\u6392\\u5E8F\\u5DF2\\u66F4\\u6539\\u4E3A\\uFF1A\".concat(val)\n      });\n    },\n    // 推荐\n    handleRecommend: function handleRecommend(val, rowData) {\n      var _this3 = this;\n\n      this.loading = true;\n      console.log(val, rowData);\n\n      if (val) {\n        setTimeout(function () {\n          _this3.loading = false;\n\n          _this3.$message({\n            type: 'success',\n            message: '推荐成功'\n          });\n        }, 1000);\n      } else {\n        setTimeout(function () {\n          _this3.loading = false;\n\n          _this3.$message({\n            type: 'success',\n            message: '取消推荐'\n          });\n        }, 1000);\n      }\n    },\n    expandChange: function expandChange(row, expandedRows) {\n      console.log(row, expandedRows);\n    },\n    // 单元格编辑\n    handleCellEdit: function handleCellEdit(row) {\n      row.editFlag = true; // eslint-disable-line\n\n      this.$set(this.filterTableColumn[7], 'width', 200);\n      this.tempEditRemark = row.remark;\n      this.editRow++;\n    },\n    handleCellSave: function handleCellSave(row) {\n      var _this4 = this;\n\n      row.editFlag = false; // eslint-disable-line\n\n      setTimeout(function () {\n        _this4.editRow--;\n\n        _this4.$message({\n          type: 'success',\n          message: '修改成功'\n        });\n      }, 1000);\n    },\n    handleCellCancel: function handleCellCancel(row) {\n      row.editFlag = false; // eslint-disable-line\n\n      console.log(this.tempEditRemark);\n      row.remark = this.tempEditRemark; // eslint-disable-line\n\n      this.editRow--;\n    },\n    // 切换分页\n    handleCurrentChange: function () {\n      var _handleCurrentChange = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(val) {\n        var _this5 = this;\n\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.currentPage = val;\n                this.loading = true;\n                setTimeout(function () {\n                  _this5._getTableData((_this5.currentPage - 1) * _this5.pageCount, _this5.pageCount);\n\n                  _this5.loading = false;\n                }, 1000);\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function handleCurrentChange(_x) {\n        return _handleCurrentChange.apply(this, arguments);\n      }\n\n      return handleCurrentChange;\n    }(),\n    // 操作列\n    buttonMethods: function buttonMethods(func, index, row) {\n      var self = this;\n      var methods = this.$options.methods;\n      methods[func](self, index, row);\n    },\n    handleEdit: function handleEdit(self, index, row) {\n      self.handleCellEdit(row);\n      console.log(index, row);\n    },\n    handleDelete: function handleDelete(self, index, val) {\n      console.log(val);\n      self.$confirm('此操作将永久删除该信息, 是否继续?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                self.loading = true; // eslint-disable-line\n\n                setTimeout(function () {\n                  self.tableData.splice(index, 1);\n                  self.loading = false; // eslint-disable-line\n                }, 1000);\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      })));\n    },\n    // 搜索\n    onQueryChange: function onQueryChange(query) {\n      var _this6 = this;\n\n      this.searchKeyword = query.trim();\n\n      if (!query) {\n        this._getTableData(0, 20);\n\n        return;\n      }\n\n      this.loading = true;\n      setTimeout(function () {\n        _this6.loading = false;\n        _this6.tableData = movie.getDataByQuery(_this6.searchKeyword);\n      }, 1000);\n    }\n  },\n  watch: {\n    // 监听固定列变化\n    fixedLeftList: function fixedLeftList() {\n      var _this7 = this;\n\n      this.filterTableColumn.map(function (item, index) {\n        if (_this7.fixedLeftList.indexOf(item.label) > -1) {\n          _this7.$set(_this7.filterTableColumn[index], 'fixed', 'left');\n        } else if (_this7.fixedRightList.indexOf(item.label) === -1) {\n          _this7.$set(_this7.filterTableColumn[index], 'fixed', false);\n        }\n\n        return '';\n      });\n      console.log(this.filterTableColumn);\n    },\n    fixedRightList: function fixedRightList() {\n      var _this8 = this;\n\n      this.filterTableColumn.map(function (item, index) {\n        if (_this8.fixedRightList.indexOf(item.label) > -1) {\n          _this8.$set(_this8.filterTableColumn[index], 'fixed', 'right');\n        } else if (_this8.fixedLeftList.indexOf(item.label) === -1) {\n          _this8.$set(_this8.filterTableColumn[index], 'fixed', false);\n        }\n\n        return '';\n      });\n      console.log(this.filterTableColumn);\n    },\n    editRow: function editRow() {\n      if (this.filterTableColumn[7]) {\n        this.editRow === 0 // eslint-disable-line\n        ? this.$set(this.filterTableColumn[7], 'width', 200) // eslint-disable-line\n        : null; // eslint-disable-line\n      }\n\n      return '';\n    }\n  }\n};",{"version":3,"mappings":"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","names":["components","LinSearch","data","tableData","loading","Hidden","searchKeyword","checkList","filterTableColumn","refreshPagination","currentPage","pageCount","total_nums","dialogTableVisible","fixedLeftList","fixedRightList","value","editRow","showTooltip","computed","created","name","func","type","methods","_getTableData","start","count","res","temp","rowClick","val","console","handleChange","showRowOperateModal","handleSort","rowData","message","handleRecommend","setTimeout","expandChange","row","expandedRows","handleCellEdit","handleCellSave","handleCellCancel","handleCurrentChange","buttonMethods","index","handleEdit","self","handleDelete","$confirm","confirmButtonText","cancelButtonText","then","onQueryChange","query","watch"],"sourceRoot":"src/plugin/lin-cms-ui/view/table","sources":["table-combo.vue"],"sourcesContent":["<template>\n  <!-- 列表页面 -->\n  <div class=\"tableSample\">\n    <div class=\"header\">\n      <div class=\"header-left\"><p class=\"title\">豆瓣电影TOP250</p></div>\n      <div class=\"header-right\">\n        <lin-search @query=\"onQueryChange\" placeholder=\"请输入电影名\" />\n        <div style=\"margin-left:30px\">\n          <el-button type=\"primary\" @click=\"dialogTableVisible = !dialogTableVisible\">列操作</el-button>\n        </div>\n      </div>\n    </div>\n    <div class=\"table-main\">\n      <el-dialog top=\"5vh\" width=\"60%\" :visible.sync=\"dialogTableVisible\">\n        <!-- 定制列 -->\n        <span>选择要展示的列:</span>\n        <el-checkbox-group v-model=\"checkList\" @change=\"handleChange\" class=\"m-20\">\n          <el-checkbox\n            :disabled=\"item === '电影名' || item === '排名'\"\n            :label=\"item\"\n            v-for=\"item in tempCheckList\"\n            :key=\"item\"\n          />\n        </el-checkbox-group>\n        <!-- 固定列 -->\n        <span>选择固定在左侧的列:</span>\n        <el-checkbox-group v-model=\"fixedLeftList\" class=\"m-20\">\n          <el-checkbox\n            :disabled=\"fixedRightList.indexOf(item) > -1 || checkList.indexOf(item) === -1\"\n            :label=\"item\"\n            v-for=\"item in tempCheckList\"\n            :key=\"item\"\n          />\n        </el-checkbox-group>\n        <span>选择固定在右侧的列:</span>\n        <el-checkbox-group v-model=\"fixedRightList\" class=\"m-20\">\n          <el-checkbox\n            :disabled=\"fixedLeftList.indexOf(item) > -1 || checkList.indexOf(item) === -1\"\n            :label=\"item\"\n            v-for=\"item in tempCheckList\"\n            :key=\"item\"\n          />\n        </el-checkbox-group>\n      </el-dialog>\n      <el-table\n        :data=\"tableData\"\n        @row-dblclick=\"rowClick\"\n        @expand-change=\"expandChange\"\n        v-loading=\"loading\"\n        id=\"out-table'\"\n      >\n        <!-- 展示摘要 -->\n        <el-table-column type=\"expand\">\n          <template slot-scope=\"props\">\n            <div class=\"summary\">\n              <img :src=\"props.row.thumb\" alt />\n              <el-form label-position=\"left\" inline class=\"demo-table-expand\">\n                <el-form-item label=\"电影名\">\n                  <span>{{ props.row.title }}</span>\n                </el-form-item>\n                <el-form-item label=\"导演\">\n                  <span>{{ props.row.directors }}</span>\n                </el-form-item>\n                <el-form-item label=\"主演\">\n                  <span>{{ props.row.casts }}</span>\n                </el-form-item>\n              </el-form>\n            </div>\n          </template>\n        </el-table-column>\n        <!-- 开始循环 -->\n        <template v-for=\"item in filterTableColumn\">\n          <!-- 自定义排序 -->\n          <el-table-column label=\"排序\" v-if=\"item.label === '排序'\" v-bind:key=\"item.label\">\n            <template slot-scope=\"props\">\n              <input\n                type=\"number\"\n                class=\"sort-input\"\n                v-model=\"props.row.sorting\"\n                @blur=\"handleSort(props.row.sorting, props.row)\"\n              />\n            </template>\n          </el-table-column>\n          <!-- 正常表单列 -->\n          <el-table-column\n            v-bind:key=\"item.label\"\n            v-if=\"!item.noRepeat\"\n            :prop=\"item.prop\"\n            :label=\"item.label\"\n            :show-overflow-tooltip=\"true\"\n            :fixed=\"item.fixed ? item.fixed : false\"\n            :width=\"item.width ? item.width : ''\"\n          ></el-table-column>\n          <!-- 排序 评分 -->\n          <el-table-column\n            label=\"评分\"\n            :prop=\"item.prop\"\n            sortable\n            v-bind:key=\"item.label\"\n            :fixed=\"item.fixed ? item.fixed : false\"\n            :width=\"item.width ? item.width : ''\"\n            v-if=\"item.label === '评分'\"\n          ></el-table-column>\n          <!-- 单元格编辑 -->\n          <el-table-column\n            v-bind:key=\"item.label\"\n            label=\"备注\"\n            prop=\"remark\"\n            :width=\"item.width\"\n            show-overflow-tooltip\n            v-if=\"item.label === '备注'\"\n          >\n            <template slot-scope=\"props\">\n              <div v-if=\"!props.row.editFlag\" class=\"table-edit\">\n                <div @click=\"handleEdit(props.row)\" class=\"content\">{{ props.row.remark }}</div>\n                <div class=\"cell-icon\" @click=\"handleCellEdit(props.row)\"><i class=\"el-icon-edit\"></i></div>\n              </div>\n              <div v-else class=\"table-edit\">\n                <el-input v-model=\"props.row.remark\" placeholder></el-input>\n                <div class=\"cell-icon-edit\">\n                  <div class=\"cell-save\" @click=\"handleCellSave(props.row)\"><i class=\"el-icon-check\"></i></div>\n                  <div class=\"cell-cancel\" @click=\"handleCellCancel(props.row)\"><i class=\"el-icon-close\"></i></div>\n                </div>\n              </div>\n            </template>\n          </el-table-column>\n          <!-- 推荐 -->\n          <el-table-column label=\"推荐\" v-if=\"item.label === '推荐'\" v-bind:key=\"item.label\">\n            <template slot-scope=\"props\">\n              <el-switch\n                v-model=\"props.row.recommend\"\n                active-color=\"#3963bc\"\n                @change=\"handleRecommend($event, props.row)\"\n              ></el-switch>\n            </template>\n          </el-table-column>\n        </template>\n        <!-- 操作列 -->\n        <el-table-column label=\"操作\" fixed=\"right\" width=\"170\">\n          <template slot-scope=\"scope\">\n            <el-button\n              v-for=\"(item, index) in operate\"\n              :type=\"item.type\"\n              plain\n              size=\"mini\"\n              :key=\"index\"\n              @click.native.prevent.stop=\"buttonMethods(item.func, scope.$index, scope.row)\"\n              >{{ item.name }}</el-button\n            >\n          </template>\n        </el-table-column>\n      </el-table>\n\n      <!-- 分页 -->\n      <div class=\"pagination\" v-if=\"!searchKeyword\">\n        <el-pagination\n          @current-change=\"handleCurrentChange\"\n          :background=\"true\"\n          :page-size=\"pageCount\"\n          :current-page=\"currentPage\"\n          v-if=\"refreshPagination\"\n          layout=\"prev, pager, next, jumper\"\n          :total=\"total_nums\"\n        ></el-pagination>\n      </div>\n    </div>\n    <source-code\n      link=\"https://github.com/TaleLin/lin-cms-vue/blob/master/src/plugins/lin-cms-ui/views/table/TableCombo.vue\"\n    ></source-code>\n  </div>\n</template>\n\n<script>\nimport LinSearch from '@/component/base/search/lin-search'\nimport { tableColumn } from './data'\nimport movie from '../../model/movie.js'\n\nexport default {\n  components: {\n    LinSearch,\n  },\n  data() {\n    return {\n      tableData: [],\n      loading: false,\n      Hidden: true, // 默认隐藏自定义排序列\n      searchKeyword: '',\n      // 定制列相关\n      checkList: [],\n      filterTableColumn: [],\n      // 分页相关\n      refreshPagination: true, // 页数增加的时候，因为缓存的缘故，需要刷新Pagination组件\n      currentPage: 1, // 默认获取第一页的数据\n      pageCount: 10, // 每页10条数据\n      total_nums: 180, // 分组内的用户总数\n      // 固定列相关\n      dialogTableVisible: false,\n      fixedLeftList: [],\n      fixedRightList: [],\n      value: '',\n      // 单元格编辑相关\n      editRow: 0,\n      showTooltip: true,\n    }\n  },\n  computed: {},\n  created() {\n    // 获取数据\n    this._getTableData((this.currentPage - 1) * this.pageCount, this.pageCount)\n    this.tableColumn = tableColumn\n    // 操作栏\n    this.operate = [\n      { name: '编辑', func: 'handleEdit', type: 'primary' },\n      { name: '删除', func: 'handleDelete', type: 'danger' },\n    ]\n    // 定制列\n    this.tempCheckList = tableColumn.map(v => v.label).slice()\n    this.checkList = tableColumn.map(v => v.label)\n    this.filterTableColumn = tableColumn.filter(v => this.checkList.indexOf(v.label) > -1)\n  },\n  methods: {\n    // 获取数据\n    _getTableData(start, count) {\n      const res = movie.getTop250(start, count)\n      res.map(item => {\n        const temp = item\n        temp.editFlag = false\n        return ''\n      })\n      this.tableData = [...res]\n    },\n\n    rowClick(val) {\n      console.log(val)\n    },\n\n    // 定制列\n    handleChange() {\n      this.filterTableColumn = tableColumn.filter(v => this.checkList.indexOf(v.label) > -1)\n    },\n    showRowOperateModal() {},\n\n    // 变更排序\n    handleSort(val, rowData) {\n      console.log('rowData', rowData)\n      this.$message({\n        type: 'success',\n        message: `排序已更改为：${val}`,\n      })\n    },\n\n    // 推荐\n    handleRecommend(val, rowData) {\n      this.loading = true\n      console.log(val, rowData)\n      if (val) {\n        setTimeout(() => {\n          this.loading = false\n          this.$message({\n            type: 'success',\n            message: '推荐成功',\n          })\n        }, 1000)\n      } else {\n        setTimeout(() => {\n          this.loading = false\n          this.$message({\n            type: 'success',\n            message: '取消推荐',\n          })\n        }, 1000)\n      }\n    },\n\n    expandChange(row, expandedRows) {\n      console.log(row, expandedRows)\n    },\n\n    // 单元格编辑\n    handleCellEdit(row) {\n      row.editFlag = true // eslint-disable-line\n      this.$set(this.filterTableColumn[7], 'width', 200)\n      this.tempEditRemark = row.remark\n      this.editRow++\n    },\n    handleCellSave(row) {\n      row.editFlag = false // eslint-disable-line\n      setTimeout(() => {\n        this.editRow--\n        this.$message({\n          type: 'success',\n          message: '修改成功',\n        })\n      }, 1000)\n    },\n    handleCellCancel(row) {\n      row.editFlag = false // eslint-disable-line\n      console.log(this.tempEditRemark)\n      row.remark = this.tempEditRemark // eslint-disable-line\n      this.editRow--\n    },\n\n    // 切换分页\n    async handleCurrentChange(val) {\n      this.currentPage = val\n      this.loading = true\n      setTimeout(() => {\n        this._getTableData((this.currentPage - 1) * this.pageCount, this.pageCount)\n        this.loading = false\n      }, 1000)\n    },\n\n    // 操作列\n    buttonMethods(func, index, row) {\n      const self = this\n      const { methods } = this.$options\n      methods[func](self, index, row)\n    },\n    handleEdit(self, index, row) {\n      self.handleCellEdit(row)\n      console.log(index, row)\n    },\n    handleDelete(self, index, val) {\n      console.log(val)\n      self\n        .$confirm('此操作将永久删除该信息, 是否继续?', '提示', {\n          confirmButtonText: '确定',\n          cancelButtonText: '取消',\n          type: 'warning',\n        })\n        .then(async () => {\n          self.loading = true // eslint-disable-line\n          setTimeout(() => {\n            self.tableData.splice(index, 1)\n            self.loading = false // eslint-disable-line\n          }, 1000)\n        })\n    },\n\n    // 搜索\n    onQueryChange(query) {\n      this.searchKeyword = query.trim()\n      if (!query) {\n        this._getTableData(0, 20)\n        return\n      }\n      this.loading = true\n      setTimeout(() => {\n        this.loading = false\n        this.tableData = movie.getDataByQuery(this.searchKeyword)\n      }, 1000)\n    },\n  },\n\n  watch: {\n    // 监听固定列变化\n    fixedLeftList() {\n      this.filterTableColumn.map((item, index) => {\n        if (this.fixedLeftList.indexOf(item.label) > -1) {\n          this.$set(this.filterTableColumn[index], 'fixed', 'left')\n        } else if (this.fixedRightList.indexOf(item.label) === -1) {\n          this.$set(this.filterTableColumn[index], 'fixed', false)\n        }\n        return ''\n      })\n      console.log(this.filterTableColumn)\n    },\n    fixedRightList() {\n      this.filterTableColumn.map((item, index) => {\n        if (this.fixedRightList.indexOf(item.label) > -1) {\n          this.$set(this.filterTableColumn[index], 'fixed', 'right')\n        } else if (this.fixedLeftList.indexOf(item.label) === -1) {\n          this.$set(this.filterTableColumn[index], 'fixed', false)\n        }\n        return ''\n      })\n      console.log(this.filterTableColumn)\n    },\n    editRow() {\n      if (this.filterTableColumn[7]) {\n        this.editRow === 0 // eslint-disable-line\n          ? this.$set(this.filterTableColumn[7], 'width', 200) // eslint-disable-line\n          : null // eslint-disable-line\n      }\n      return ''\n    },\n  },\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.tableSample {\n  padding: 0 0 30px;\n\n  .header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 0 30px;\n    border-bottom: 1px solid #dae1ed;\n\n    .header-left {\n      float: left;\n\n      .title {\n        height: 59px;\n        line-height: 59px;\n        color: $parent-title-color;\n        font-size: 16px;\n        font-weight: 500;\n      }\n    }\n\n    .header-right {\n      float: right;\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n    }\n  }\n\n  .table-main {\n    padding: 0 30px;\n    margin-top: 30px;\n  }\n\n  .top-operate {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 15px;\n    margin-top: 30px;\n  }\n\n  .sort-input {\n    width: 50px;\n    background: none;\n    justify-content: space-around;\n  }\n\n  .table-edit {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    width: 100%;\n    .content {\n      overflow: hidden;\n      text-overflow: ellipsis;\n      white-space: nowrap;\n    }\n\n    .cell-icon {\n      cursor: pointer;\n      color: #3963bc;\n      font-size: 16px;\n    }\n\n    .cell-icon-edit {\n      display: flex;\n      margin-left: 20px;\n      width: 50px;\n      justify-content: space-between;\n\n      .cell-cancel {\n        cursor: pointer;\n        color: #3963bc;\n        font-size: 16px;\n      }\n\n      .cell-save {\n        cursor: pointer;\n        color: #3963bc;\n        font-size: 16px;\n        margin-right: -20px;\n      }\n    }\n  }\n\n  .m-20 {\n    margin-bottom: 10px;\n    margin-top: 5px;\n  }\n\n  .summary {\n    display: flex;\n    justify-content: flex-start;\n    flex-direction: row;\n\n    img {\n      width: 135px;\n      height: 200px;\n    }\n\n    .demo-table-expand {\n      font-size: 0;\n      margin-left: 30px;\n      display: flex;\n      flex-direction: column;\n\n      label {\n        width: 90px;\n        color: #99a9bf;\n      }\n\n      .el-form-item {\n        margin-right: 0;\n        margin-bottom: 0;\n        display: flex;\n        flex-direction: row;\n      }\n    }\n  }\n\n  .pagination {\n    display: flex;\n    justify-content: flex-end;\n    margin: 20px;\n  }\n}\n// dialog\n.tableSample ::v-deep .el-dialog__footer {\n  text-align: left;\n  padding-left: 30px;\n}\n\n.tableSample ::v-deep .el-dialog__header {\n  padding-left: 30px;\n}\n\n.tableSample ::v-deep .el-dialog__body {\n  padding: 30px;\n}\n</style>\n"]}]}