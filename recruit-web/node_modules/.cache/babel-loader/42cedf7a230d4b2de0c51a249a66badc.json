{"remainingRequest":"D:\\recruit\\recruit-system\\recruit-web\\node_modules\\thread-loader\\dist\\cjs.js!D:\\recruit\\recruit-system\\recruit-web\\node_modules\\babel-loader\\lib\\index.js!D:\\recruit\\recruit-system\\recruit-web\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\recruit\\recruit-system\\recruit-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\recruit\\recruit-system\\recruit-web\\src\\view\\about\\msg.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\recruit\\recruit-system\\recruit-web\\src\\view\\about\\msg.vue","mtime":1745587428116},{"path":"D:\\recruit\\recruit-system\\recruit-web\\babel.config.js","mtime":1706286066000},{"path":"D:\\recruit\\recruit-system\\recruit-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\recruit\\recruit-system\\recruit-web\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\recruit\\recruit-system\\recruit-web\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\recruit\\recruit-system\\recruit-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\recruit\\recruit-system\\recruit-web\\node_modules\\vue-loader\\lib\\index.js","mtime":1655715099000}],"contextDependencies":[],"result":["function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == _typeof(value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { Application } from '@/model/application';\nimport Utils from '@/lin/util/util';\nimport store from '@/store';\nimport { formatMessageTime, formatSidebarTime, shouldShowTimestamp as _shouldShowTimestamp, formatTimestamp } from '@/lin/util/time-formatter';\nexport default {\n  data: function data() {\n    return {\n      me: null,\n      inputRedis: {},\n      // 输入的内容缓存\n      defaultImg: require('@/assets/image/user/user.png'),\n      selectInfo: {\n        id: 0,\n        msg: [],\n        name: '',\n        // 添加默认值防止undefined\n        icon: '' // 添加默认值防止undefined\n\n      },\n      chatInfo: {},\n      hasHistoryMessages: false,\n      // 标记是否有历史消息\n      hasSystemAdminMessage: false,\n      // 标记是否有系统管理员的历史消息\n      target_info: [],\n      token_msg: {},\n      wsCtl: {\n        allow: true,\n        timer: null\n      },\n      hart: {\n        timer: 5,\n        // 每隔一段时间监听一次在线客户端 /s\n        type: 'ping',\n        timeObj: null,\n        check: {} // 当客户端离线之后,第一次离线的加入对象内, 如果第二次还是离线,那么将目标用户标志为离线,避免重复闪烁\n\n      },\n      isLoading: false // 用于标记消息是否正在加载中\n\n    };\n  },\n  methods: {\n    // 使用导入的格式化方法\n    formatMessageTime: formatMessageTime,\n    formatSidebarTime: formatSidebarTime,\n    // 判断是否应该显示时间戳\n    shouldShowTimestamp: function shouldShowTimestamp(index) {\n      if (!this.selectInfo || !this.selectInfo.msg) return false;\n      return _shouldShowTimestamp(index, this.selectInfo.msg);\n    },\n    clickChat: function clickChat(item) {\n      // 如果当前正在加载中，不允许切换对话\n      if (this.isLoading || !item) return;\n      this.selectInfo = item;\n\n      if (item.isRead === 0) {\n        if (this.$ws && this.$ws.ws && this.$ws.ws.readyState === 1) {\n          this.$ws.ws.send(JSON.stringify({\n            type: 'state',\n            readID: item.id\n          }));\n        }\n\n        item.isRead = 1;\n      }\n\n      this.moeScroll(10);\n    },\n    sendMsg: function sendMsg() {\n      var _this = this;\n\n      if (!this.wsCtl.allow) {\n        return;\n      }\n\n      if (!this.$ws || !this.$ws.ws || this.$ws.ws.readyState != 1) {\n        return this.$message.warning('暂时无法发送信息, 您与服务器的连接已断开.');\n      }\n\n      if (!this.selectInfo || !this.selectInfo.id) {\n        return this.$message.warning('请先选择一个聊天对象');\n      }\n\n      if (!this.inputRedis[this.selectInfo.id]) return;\n      var inputMsg = this.inputRedis[this.selectInfo.id].slice(0, 500); // 限制字数\n\n      this.inputRedis[this.selectInfo.id] = ''; // 清空输入框\n      // 使用格式化的时间戳\n\n      var timestamp = formatTimestamp();\n\n      if (this.selectInfo.msg) {\n        this.selectInfo.msg.push({\n          type: 'this',\n          text: inputMsg,\n          time: timestamp\n        });\n      } else {\n        this.selectInfo.msg = [{\n          type: 'this',\n          text: inputMsg,\n          time: timestamp\n        }];\n      }\n\n      this.wsCtl.timer = setTimeout(function () {\n        _this.wsCtl.allow = true;\n        clearTimeout(_this.wsCtl.timer);\n        _this.wsCtl.timer = null;\n      }, 1000);\n\n      try {\n        if (!this.me) {\n          throw new Error('用户信息不存在');\n        }\n\n        this.$ws.ws.send(JSON.stringify({\n          self: {\n            name: this.me.nickname || '',\n            icon: this.me.avatar && JSON.stringify(this.me.avatar).length > 100 ? 'null' : this.me.avatar || null,\n            id: this.me.id\n          },\n          target: {\n            id: this.selectInfo.id,\n            name: this.selectInfo.name || '',\n            icon: this.selectInfo.icon && JSON.stringify(this.selectInfo.icon).length > 100 ? 'null' : this.selectInfo.icon || null\n          },\n          time: timestamp,\n          type: 'alone',\n          content: inputMsg,\n          recvID: this.selectInfo.id\n        }));\n        this.moeScroll();\n      } catch (e) {\n        console.error('发送消息失败:', e);\n\n        if (this.selectInfo && this.selectInfo.msg) {\n          this.selectInfo.msg.push({\n            type: 'this',\n            text: '(发送失败)' + (this.inputRedis[this.selectInfo.id] || ''),\n            time: timestamp\n          });\n        }\n      }\n    },\n    recvMsg: function () {\n      var _recvMsg = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var _this2 = this;\n\n        var msgInfo;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (this.$ws && this.$ws.ws) {\n                  this.isLoading = true; // 开始加载消息\n\n                  try {\n                    // 确保chatInfo[-1]存在\n                    if (this.chatInfo && this.chatInfo['-1']) {\n                      // 机器人默认在线,除非用户断开了与后台的连接\n                      this.chatInfo['-1']['online'] = true;\n                    }\n\n                    msgInfo = {\n                      type: 'token',\n                      _id: this.me ? this.me.id : null\n                    };\n                    this.$ws.ws.send(JSON.stringify(msgInfo));\n\n                    this.$ws.ws.onmessage = /*#__PURE__*/function () {\n                      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(res) {\n                        var data, info, historyMessages, readList, _info, i;\n\n                        return _regeneratorRuntime().wrap(function _callee$(_context) {\n                          while (1) {\n                            switch (_context.prev = _context.next) {\n                              case 0:\n                                _context.prev = 0;\n                                data = JSON.parse(res.data); // 捕获系统消息并跳出\n\n                                if (!(data && data.type == 'system')) {\n                                  _context.next = 8;\n                                  break;\n                                }\n\n                                _context.next = 5;\n                                return Application.getMsg(Utils.filterStr(data.content));\n\n                              case 5:\n                                info = _context.sent;\n\n                                if (_this2.chatInfo && _this2.chatInfo['-1'] && _this2.chatInfo['-1'].msg) {\n                                  _this2.chatInfo['-1'].msg.push({\n                                    type: 'sys',\n                                    text: info.data,\n                                    time: data.time\n                                  });\n\n                                  _this2.moeScroll();\n                                }\n\n                                return _context.abrupt(\"return\");\n\n                              case 8:\n                                if (!(data && data.type == 'token')) {\n                                  _context.next = 17;\n                                  break;\n                                }\n\n                                // 检查是否有历史消息\n                                if (data.content && Array.isArray(data.content) && data.content.length > 0) {\n                                  _this2.hasHistoryMessages = true; // 预处理数据以提高效率\n\n                                  historyMessages = _this2.preprocessHistoryData(data.content); // 检查是否有与系统管理员(ID=13)的历史消息\n\n                                  _this2.hasSystemAdminMessage = historyMessages.some(function (msg) {\n                                    return msg && (msg.sendId === '13' || msg.recvId === '13');\n                                  }); // 批量处理历史消息\n\n                                  if (data.readList) {\n                                    _this2.processHistoryMessages(historyMessages, data.readList);\n                                  }\n                                } // 如果有联系人ID，设置选中对话\n\n\n                                if (data.ContactID && data.ContactID != -1 && _this2.chatInfo && _this2.chatInfo[data.ContactID]) {\n                                  _this2.selectInfo = _this2.chatInfo[data.ContactID];\n\n                                  if (_this2.selectInfo) {\n                                    _this2.selectInfo.isRead = 1;\n                                  }\n                                } else if (data.readList) {\n                                  try {\n                                    readList = data.readList.replace(/&/g, '').split('^').filter(function (item) {\n                                      return item != '';\n                                    });\n\n                                    if (readList && readList.length && _this2.chatInfo && _this2.chatInfo[readList[0]]) {\n                                      _this2.selectInfo = _this2.chatInfo[readList[0]];\n\n                                      if (_this2.selectInfo && _this2.selectInfo.isRead === 0 && _this2.$ws && _this2.$ws.ws) {\n                                        _this2.$ws.ws.send(JSON.stringify({\n                                          type: 'state',\n                                          readID: _this2.selectInfo.id\n                                        }));\n\n                                        _this2.selectInfo.isRead = 1;\n                                      }\n                                    }\n                                  } catch (e) {\n                                    console.error('处理readList出错:', e);\n                                  }\n                                } // 添加系统管理员对话（如果需要）\n\n\n                                _this2.addSystemAdminChat(); // 默认选择对话\n\n\n                                if (!_this2.selectInfo || !_this2.selectInfo.id) {\n                                  if (_this2.chatInfo && _this2.chatInfo['-1']) {\n                                    _this2.selectInfo = _this2.chatInfo['-1'];\n                                  }\n                                } // 心跳包\n\n\n                                if (_this2.chatInfo) {\n                                  _this2.hartCheck(_this2.chatInfo);\n\n                                  _this2.hart.timeObj = setInterval(function () {\n                                    _this2.hartCheck(_this2.chatInfo);\n                                  }, _this2.hart.timer * 1000);\n                                }\n\n                                _this2.isLoading = false; // 加载完成\n\n                                _context.next = 24;\n                                break;\n\n                              case 17:\n                                if (!(data && data.type == 'alone' && data.self)) {\n                                  _context.next = 23;\n                                  break;\n                                }\n\n                                if (!(data.self.id === 13 && _this2.me && _this2.me.id === 1)) {\n                                  _context.next = 20;\n                                  break;\n                                }\n\n                                return _context.abrupt(\"return\");\n\n                              case 20:\n                                if (_this2.chatInfo && data.self && data.self.id && _this2.chatInfo[data.self.id]) {\n                                  _this2.chatInfo[data.self.id].msg.push({\n                                    type: 'target',\n                                    text: data.content,\n                                    time: data.time\n                                  });\n\n                                  _this2.chatInfo[data.self.id].isRead = 0;\n                                } else if (data.self && data.self.id) {\n                                  // 解决无法实时刷新dom\n                                  _this2.$set(_this2.chatInfo, data.self.id, {\n                                    id: data.self.id,\n                                    name: data.self.nickName || '',\n                                    type: 'user',\n                                    time: data.time,\n                                    icon: data.self.icon || '',\n                                    msg: [{\n                                      type: 'target',\n                                      text: data.content || '',\n                                      time: data.time\n                                    }],\n                                    head: null,\n                                    isRead: 0\n                                  });\n                                }\n\n                                _context.next = 24;\n                                break;\n\n                              case 23:\n                                if (data && data.type === 'ping') {\n                                  _this2.hart.check = {};\n\n                                  if (data.content && data.content.length) {\n                                    _info = data.content.split('|');\n\n                                    for (i = 0; i < _info.length - 1; i++) {\n                                      _this2.hart.check[_info[i]] = true;\n\n                                      if (_this2.chatInfo && _info[i] && _this2.chatInfo[_info[i]]) {\n                                        _this2.$set(_this2.chatInfo[_info[i]], 'online', true);\n                                      }\n                                    }\n                                  }\n                                }\n\n                              case 24:\n                                _this2.moeScroll();\n\n                                _context.next = 30;\n                                break;\n\n                              case 27:\n                                _context.prev = 27;\n                                _context.t0 = _context[\"catch\"](0);\n                                console.error('处理websocket消息失败:', _context.t0);\n\n                              case 30:\n                              case \"end\":\n                                return _context.stop();\n                            }\n                          }\n                        }, _callee, null, [[0, 27]]);\n                      }));\n\n                      return function (_x) {\n                        return _ref.apply(this, arguments);\n                      };\n                    }();\n                  } catch (error) {\n                    console.error('接收消息时发生错误:', error);\n                    this.isLoading = false; // 确保在出错时也能重置加载状态\n                  }\n                }\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function recvMsg() {\n        return _recvMsg.apply(this, arguments);\n      }\n\n      return recvMsg;\n    }(),\n    // 预处理历史数据以提高性能\n    preprocessHistoryData: function preprocessHistoryData(content) {\n      if (!content || !Array.isArray(content)) {\n        return [];\n      } // 深拷贝避免影响原始数据\n\n\n      try {\n        return JSON.parse(JSON.stringify(content));\n      } catch (e) {\n        console.error('预处理历史数据失败:', e);\n        return [];\n      }\n    },\n    // 批量处理历史消息\n    processHistoryMessages: function processHistoryMessages(messages, readList) {\n      var _this3 = this;\n\n      if (!messages || !Array.isArray(messages) || !readList) {\n        console.error('处理历史消息失败: 无效的参数', {\n          messages: messages,\n          readList: readList\n        });\n        return;\n      } // 优化：使用Map存储聊天信息，提高查找效率\n\n\n      var chatMap = new Map();\n      messages.forEach(function (item) {\n        if (!item || !item.sendId || !item.recvId) {\n          console.warn('无效的消息项', item);\n          return;\n        }\n\n        var cls = item.recvId == (_this3.me ? _this3.me.id : null) ? 'target' : 'this'; // 如果信息列表没有这个用户的数据\n\n        var keyID = item.sendId; // 如果发送者的id是当前用户, 那么将写入数据的key修改为接收者的key\n\n        if (_this3.me && parseInt(_this3.me.id) == parseInt(keyID)) {\n          keyID = item.recvId;\n        } // 跳过系统管理员消息（对用户ID为1的用户）\n\n\n        if (keyID === '13' && _this3.me && _this3.me.id === 1) {\n          return;\n        }\n\n        try {\n          if (!chatMap.has(keyID)) {\n            var name = '',\n                icon = '';\n\n            try {\n              if (_this3.me && parseInt(_this3.me.id) == parseInt(item.sendId)) {\n                var target = item.target ? JSON.parse(item.target) : {};\n                name = target.name || '';\n                icon = target.icon || '';\n              } else {\n                var self = item.self ? JSON.parse(item.self) : {};\n                name = self.name || '';\n                icon = self.icon || '';\n              }\n            } catch (e) {\n              console.warn('解析消息元数据失败:', e);\n            }\n\n            chatMap.set(keyID, {\n              messages: [],\n              name: name,\n              icon: icon\n            });\n          }\n\n          chatMap.get(keyID).messages.push({\n            type: cls,\n            text: item.content || '',\n            time: item.timestamp || formatTimestamp()\n          });\n        } catch (e) {\n          console.error('处理消息时出错:', e);\n        }\n      }); // 更新到Vue实例\n\n      chatMap.forEach(function (value, keyID) {\n        if (_this3.chatInfo && _this3.chatInfo[keyID] && _this3.chatInfo[keyID]['msg']) {\n          // 已存在的对话，追加消息\n          value.messages.forEach(function (msg) {\n            _this3.chatInfo[keyID]['msg'].push(msg);\n          });\n        } else if (keyID) {\n          // 新建对话\n          var isRead = readList.indexOf('^' + keyID + '&') != -1 ? 0 : 1;\n\n          try {\n            _this3.$set(_this3.chatInfo, keyID, _this3.packMsg(keyID, value.name, 'alone', value.messages[value.messages.length - 1].time, value.icon, value.messages, 'null', isRead));\n          } catch (e) {\n            console.error('创建对话失败:', e);\n          }\n        }\n      }); // 如果是用户1，删除系统管理员聊天\n\n      if (this.me && this.me.id === 1 && this.chatInfo && this.chatInfo['13']) {\n        delete this.chatInfo['13'];\n      }\n    },\n    // 添加系统管理员对话（如果需要）\n    addSystemAdminChat: function addSystemAdminChat() {\n      // 只有在以下条件下才添加系统管理员对话：\n      // 1. 用户不是系统管理员或ID为1\n      // 2. 没有与系统管理员的历史消息\n      // 3. 没有历史消息或明确需要添加系统管理员对话\n      if (!this.hasSystemAdminMessage && this.me && this.me.id !== 1 && this.me.id !== 13) {\n        try {\n          this.chatInfo['13'] = this.packMsg('13', '系统管理员', 'alone', formatTimestamp(), require('@/assets/image/user/Cat.png'), [{\n            type: 'target',\n            text: '反馈请留言',\n            time: formatTimestamp()\n          }], '', 1);\n        } catch (e) {\n          console.error('添加系统管理员对话失败:', e);\n        }\n      }\n    },\n    moeScroll: function moeScroll() {\n      var _this4 = this;\n\n      var time = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 200;\n      setTimeout(function () {\n        var container = _this4.$el.querySelector('.content');\n\n        if (container) {\n          container.scrollTop = container.scrollHeight;\n        }\n      }, time);\n    },\n    getBrowserType: function getBrowserType() {\n      // 获取浏览器 userAgent\n      var ua = navigator.userAgent; // 是否为 Opera\n\n      if (ua.indexOf('Opera') > -1) {\n        return 'Opera';\n      } // 是否为 IE\n\n\n      var isIE = ua.indexOf('compatible') > -1 && ua.indexOf('MSIE') > -1 && ua.indexOf('Opera') === -1;\n      var isIE11 = ua.indexOf('Trident') > -1 && ua.indexOf('rv:11.0') > -1; // 返回结果\n\n      if (isIE11) {\n        return 'IE11';\n      } else if (isIE) {\n        return 'IE';\n      } // 是否为 Edge\n\n\n      if (ua.indexOf('Edg') > -1) {\n        return 'Edge';\n      } // 是否为 Firefox\n\n\n      if (ua.indexOf('Firefox') > -1) {\n        return 'Firefox';\n      } // 是否为 Safari\n\n\n      if (ua.indexOf('Safari') > -1 && ua.indexOf('Chrome') == -1) {\n        return 'Safari';\n      } // 是否为 Chrome\n\n\n      if (ua.indexOf('Chrome') > -1 && ua.indexOf('Safari') > -1 && ua.indexOf('Edge') == -1) {\n        return 'Chrome';\n      } // 是否为 UC\n\n\n      if (ua.indexOf('UBrowser') > -1) {\n        return 'UC';\n      } // 是否为 QQ\n\n\n      if (ua.indexOf('QQBrowser') > -1) {\n        return 'QQ';\n      } // 都不是\n\n\n      return '未知设备';\n    },\n    // 封装信息体\n    packMsg: function packMsg(id, name, type, time, icon, msg) {\n      var header = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;\n      var isRead = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;\n      return {\n        id: id,\n        name: name || '',\n        type: type || '',\n        time: time || formatTimestamp(),\n        icon: icon == null ? this.defaultImg : icon,\n        msg: Array.isArray(msg) ? msg : [],\n        header: header,\n        isRead: isRead\n      };\n    },\n    // 心跳包检测\n    hartCheck: function hartCheck(friends) {\n      // 如果与服务器的连接断开了\n      if (!this.$ws || !this.$ws.ws || this.$ws.ws.readyState === this.$ws.ws.CLOSED) {\n        this.$message.warning('聊天服务器已断开');\n\n        if (this.hart.timeObj) {\n          clearInterval(this.hart.timeObj);\n        } // 将所有用户设为离线\n\n\n        for (var i in this.chatInfo) {\n          if (this.chatInfo[i]) {\n            this.chatInfo[i]['online'] = false;\n          }\n        }\n\n        return;\n      }\n\n      var friends_list = '';\n\n      for (var iterator in friends) {\n        if (parseInt(iterator) > 0) {\n          if (!this.hart.check[iterator]) {\n            this.$set(friends[iterator], 'online', false);\n          }\n\n          friends_list += iterator + '|';\n        }\n      }\n\n      this.$ws.ws.send(JSON.stringify({\n        type: this.hart.type,\n        friends_list: friends_list\n      }));\n    }\n  },\n  mounted: function () {\n    var _mounted = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              this.me = store.getters.user;\n\n              if (this.me) {\n                this.token_msg = {\n                  id: this.me.id,\n                  name: this.me.name || '',\n                  icon: this.me.acatar || '',\n                  msg: [],\n                  header: 'null',\n                  isRead: 1,\n                  type: 'contact',\n                  time: formatTimestamp()\n                };\n              } // 默认AI聊天机器人信息\n\n\n              this.chatInfo['-1'] = this.packMsg('-1', '在线直聘智能机', 'sys', formatTimestamp(), require('@/assets/image/user/Cat.png'), [{\n                type: 'sys',\n                text: \"\\\n           <div class='sys-msg'>\\\n        <h2>登录操作通知</h2>\\\n        <div class='describe'>[\" + this.me.nickname + \"]欢迎回来蜗牛兼职平台</div>\\\n        <div class='info'>\\\n          <div>\\\n            <span>设备/平台</span>\\\n            <span>\" + this.getBrowserType() + '浏览器</span>\\\n          </div>\\\n          <div>\\\n            <span>登录方式</span>\\\n            <span>普通登录</span>\\\n          </div>\\\n          <div>\\\n            <span>当前时间</span>\\\n            <span>' + formatTimestamp() + '</span>\\\n          </div>\\\n          <div>\\\n            <span></span>\\\n            <span>如有疑问,可以对我说噢!</span>\\\n          </div>\\\n        </div>\\\n      </div>\\\n    ',\n                time: formatTimestamp()\n              }], '登录操作通知', 1); // 连接到服务器并接收消息\n\n              if (!(this.$ws && this.$ws.ws && this.$ws.ws.readyState == 1)) {\n                _context3.next = 7;\n                break;\n              }\n\n              _context3.next = 7;\n              return this.recvMsg();\n\n            case 7:\n              _context3.next = 12;\n              break;\n\n            case 9:\n              _context3.prev = 9;\n              _context3.t0 = _context3[\"catch\"](0);\n              console.error('mounted出错:', _context3.t0);\n\n            case 12:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this, [[0, 9]]);\n    }));\n\n    function mounted() {\n      return _mounted.apply(this, arguments);\n    }\n\n    return mounted;\n  }(),\n  beforeDestroy: function beforeDestroy() {\n    if (this.wsCtl.timer) {\n      clearTimeout(this.wsCtl.timer);\n    }\n\n    if (this.hart.timeObj) {\n      clearInterval(this.hart.timeObj);\n    }\n  }\n};",null]}