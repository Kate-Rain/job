{"remainingRequest":"D:\\recruit\\recruit-system\\recruit-web\\node_modules\\thread-loader\\dist\\cjs.js!D:\\recruit\\recruit-system\\recruit-web\\node_modules\\babel-loader\\lib\\index.js!D:\\recruit\\recruit-system\\recruit-web\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\recruit\\recruit-system\\recruit-web\\src\\lin\\util\\time-formatter.js","dependencies":[{"path":"D:\\recruit\\recruit-system\\recruit-web\\src\\lin\\util\\time-formatter.js","mtime":1743604245452},{"path":"D:\\recruit\\recruit-system\\recruit-web\\babel.config.js","mtime":1706286066000},{"path":"D:\\recruit\\recruit-system\\recruit-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\recruit\\recruit-system\\recruit-web\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\recruit\\recruit-system\\recruit-web\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\recruit\\recruit-system\\recruit-web\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["/**\r\n * 时间格式化工具函数集合\r\n * 用于聊天应用中各种时间显示格式化\r\n */\n\n/**\r\n * 格式化消息时间显示\r\n * 24小时内：显示时间（如 09:30）\r\n * 昨天：显示\"昨天 HH:MM\"\r\n * 7天内：显示\"周X HH:MM\"\r\n * 超过7天：显示\"M月D日 HH:MM\"\r\n * @param {string} timeString - 日期时间字符串\r\n * @returns {string} 格式化后的时间字符串\r\n */\nexport function formatMessageTime(timeString) {\n  if (!timeString) return '';\n  var date = new Date(timeString);\n  var now = new Date(); // 检查日期是否有效\n\n  if (isNaN(date)) {\n    return timeString;\n  }\n\n  var hours = date.getHours().toString().padStart(2, '0');\n  var minutes = date.getMinutes().toString().padStart(2, '0');\n  var timeStr = \"\".concat(hours, \":\").concat(minutes); // 同一天，只显示时间\n\n  if (isSameDay(date, now)) {\n    return timeStr;\n  } // 昨天\n\n\n  var yesterday = new Date(now);\n  yesterday.setDate(now.getDate() - 1);\n\n  if (isSameDay(date, yesterday)) {\n    return \"\\u6628\\u5929 \".concat(timeStr);\n  } // 7天内，显示周几\n\n\n  var oneWeekAgo = new Date(now);\n  oneWeekAgo.setDate(now.getDate() - 7);\n\n  if (date > oneWeekAgo) {\n    var weekdays = ['周日', '周一', '周二', '周三', '周四', '周五', '周六'];\n    var weekday = weekdays[date.getDay()];\n    return \"\".concat(weekday, \" \").concat(timeStr);\n  } // 超过7天，显示月日\n\n\n  var month = (date.getMonth() + 1).toString();\n  var day = date.getDate().toString();\n  return \"\".concat(month, \"\\u6708\").concat(day, \"\\u65E5 \").concat(timeStr);\n}\n/**\r\n * 格式化左侧聊天列表时间显示\r\n * 24小时内：显示\"HH:MM\"\r\n * 超过24小时：显示\"M月D日\"\r\n * @param {string} timeString - 日期时间字符串\r\n * @returns {string} 格式化后的时间字符串\r\n */\n\nexport function formatSidebarTime(timeString) {\n  if (!timeString) return '';\n  var date = new Date(timeString);\n  var now = new Date(); // 检查日期是否有效\n\n  if (isNaN(date)) {\n    return timeString;\n  }\n\n  var hours = date.getHours().toString().padStart(2, '0');\n  var minutes = date.getMinutes().toString().padStart(2, '0'); // 24小时内\n\n  var twentyFourHoursAgo = new Date(now);\n  twentyFourHoursAgo.setHours(now.getHours() - 24);\n\n  if (date > twentyFourHoursAgo) {\n    return \"\".concat(hours, \":\").concat(minutes);\n  } // 超过24小时\n\n\n  var month = (date.getMonth() + 1).toString();\n  var day = date.getDate().toString();\n  return \"\".concat(month, \"\\u6708\").concat(day, \"\\u65E5\");\n}\n/**\r\n * 判断是否应该显示时间戳\r\n * 每条消息的第一条或者与前一条消息间隔超过1分钟才显示\r\n * @param {number} index - 当前消息索引\r\n * @param {Array} messages - 消息数组\r\n * @returns {boolean} 是否应该显示时间戳\r\n */\n\nexport function shouldShowTimestamp(index, messages) {\n  // 始终显示第一条消息的时间戳\n  if (index === 0) {\n    return true;\n  } // 获取消息时间戳\n\n\n  var currentTimeStr = messages[index].time;\n  var prevTimeStr = messages[index - 1].time; // 尝试解析时间戳\n\n  var currentMsgTime, prevMsgTime;\n\n  try {\n    currentMsgTime = new Date(currentTimeStr);\n    prevMsgTime = new Date(prevTimeStr); // 检查解析结果是否为有效日期\n\n    if (isNaN(currentMsgTime) || isNaN(prevMsgTime)) {\n      return true; // 如果无法正确比较，则显示时间戳\n    } // 计算时间差（秒）\n\n\n    var timeDiff = (currentMsgTime - prevMsgTime) / 1000; // 如果时间差超过60秒，则显示时间戳\n\n    return timeDiff >= 60;\n  } catch (error) {\n    // 出现任何错误都显示时间戳\n    return true;\n  }\n}\n/**\r\n * 格式化完整时间戳字符串\r\n * 返回包含秒的完整时间戳，用于消息存储和比较\r\n * @returns {string} 格式化的时间戳，格式: YYYY/MM/DD HH:MM:SS\r\n */\n\nexport function formatTimestamp() {\n  var now = new Date();\n  var year = now.getFullYear();\n  var month = String(now.getMonth() + 1).padStart(2, '0');\n  var day = String(now.getDate()).padStart(2, '0');\n  var hours = String(now.getHours()).padStart(2, '0');\n  var minutes = String(now.getMinutes()).padStart(2, '0');\n  var seconds = String(now.getSeconds()).padStart(2, '0');\n  return \"\".concat(year, \"/\").concat(month, \"/\").concat(day, \" \").concat(hours, \":\").concat(minutes, \":\").concat(seconds);\n}\n/**\r\n * 判断两个日期是否是同一天\r\n * @param {Date} date1 - 第一个日期\r\n * @param {Date} date2 - 第二个日期\r\n * @returns {boolean} 是否为同一天\r\n */\n\nfunction isSameDay(date1, date2) {\n  return date1.getDate() === date2.getDate() && date1.getMonth() === date2.getMonth() && date1.getFullYear() === date2.getFullYear();\n}",null]}