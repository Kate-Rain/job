{"remainingRequest":"D:\\recruit\\recruit-system\\recruit-web\\node_modules\\babel-loader\\lib\\index.js!D:\\recruit\\recruit-system\\recruit-web\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\recruit\\recruit-system\\recruit-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\recruit\\recruit-system\\recruit-web\\src\\view\\admin\\user\\user-info.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\recruit\\recruit-system\\recruit-web\\src\\view\\admin\\user\\user-info.vue","mtime":1743503542000},{"path":"D:\\recruit\\recruit-system\\recruit-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\recruit\\recruit-system\\recruit-web\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\recruit\\recruit-system\\recruit-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\recruit\\recruit-system\\recruit-web\\node_modules\\vue-loader\\lib\\index.js","mtime":1655715100000},{"path":"D:\\recruit\\recruit-system\\recruit-web\\babel.config.js","mtime":1755596402905},{"path":"D:\\recruit\\recruit-system\\recruit-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\recruit\\recruit-system\\recruit-web\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\recruit\\recruit-system\\recruit-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\recruit\\recruit-system\\recruit-web\\node_modules\\vue-loader\\lib\\index.js","mtime":1655715100000}],"contextDependencies":[],"result":["function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == _typeof(value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Admin from '@/lin/model/admin';\nimport User from '@/lin/model/user';\nexport default {\n  props: {\n    submit: {\n      type: Boolean,\n      // 表单是否显示功能按钮\n      default: true\n    },\n    id: {\n      // 用户id\n      type: Number,\n      default: undefined\n    },\n    groups: {\n      // 所有分组\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    labelPosition: {\n      // 表单label位置\n      type: String,\n      default: 'right'\n    },\n    info: {\n      // 用户信息\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    },\n    pageType: {\n      type: String,\n      default: 'add' // 区分编辑页面/添加页面\n\n    }\n  },\n  inject: ['eventBus'],\n  computed: {\n    filteredGroups: function filteredGroups() {\n      // 如果用户组ID是1或5，显示所有角色\n      if (this.userGroupId === 1 || this.userGroupId === 5) {\n        return this.groups;\n      } // 否则过滤掉ID为5的角色\n\n\n      return this.groups.filter(function (group) {\n        return group.id !== 5;\n      });\n    }\n  },\n  data: function data() {\n    var _this = this;\n\n    // 验证回调函数\n    var checkUserName = function checkUserName(rule, value, callback) {\n      // eslint-disable-line\n      if (!value) {\n        callback(new Error('用户名不能为空'));\n      }\n\n      callback();\n    };\n\n    var validatePassword = function validatePassword(rule, value, callback) {\n      if (value === '') {\n        callback(new Error('请输入密码'));\n      } else if (value.length < 6) {\n        callback(new Error('密码长度不能少于6位数'));\n      } else {\n        if (_this.form.checkPassword !== '') {\n          _this.$refs.form.validateField('confirm_password');\n        }\n\n        callback();\n      }\n    };\n\n    var validatePassword2 = function validatePassword2(rule, value, callback) {\n      if (value === '') {\n        callback(new Error('请再次输入密码'));\n      } else if (value !== _this.form.password) {\n        callback(new Error('两次输入密码不一致!'));\n      } else {\n        callback();\n      }\n    };\n\n    return {\n      loading: false,\n      // 加载动画\n      isEdited: false,\n      // 能否编辑\n      form: {\n        username: '',\n        password: '',\n        tel: '',\n        confirm_password: '',\n        email: '',\n        nickname: '',\n        group_ids: []\n      },\n      userGroupId: null,\n      // 当前用户的组ID\n      // 验证规则\n      rules: {\n        nickname: [{\n          trigger: ['blur', 'change'],\n          required: true\n        }],\n        tel: [{\n          trigger: ['blur', 'change'],\n          required: true\n        }],\n        username: [{\n          validator: checkUserName,\n          trigger: ['blur', 'change'],\n          required: true\n        }],\n        password: [{\n          validator: validatePassword,\n          trigger: 'blur',\n          required: true\n        }],\n        confirm_password: [{\n          validator: validatePassword2,\n          trigger: 'blur',\n          required: true\n        }],\n        email: [{\n          type: 'email',\n          message: '请输入正确的邮箱地址或者不填',\n          trigger: ['blur', 'change']\n        }]\n      }\n    };\n  },\n  methods: {\n    // 获取当前用户的组ID\n    fetchUserGroup: function () {\n      var _fetchUserGroup = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var res;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return User.getGroup();\n\n              case 3:\n                res = _context.sent;\n                this.userGroupId = res;\n                _context.next = 10;\n                break;\n\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context[\"catch\"](0);\n                console.error('获取用户组信息失败', _context.t0);\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 7]]);\n      }));\n\n      function fetchUserGroup() {\n        return _fetchUserGroup.apply(this, arguments);\n      }\n\n      return fetchUserGroup;\n    }(),\n    // 提交表单\n    submitForm: function () {\n      var _submitForm = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(formName) {\n        var _this2 = this;\n\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this.$refs[formName].validate( /*#__PURE__*/function () {\n                  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(valid) {\n                    var res;\n                    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n                      while (1) {\n                        switch (_context2.prev = _context2.next) {\n                          case 0:\n                            if (!valid) {\n                              _context2.next = 37;\n                              break;\n                            }\n\n                            if (!(_this2.pageType === 'add')) {\n                              _context2.next = 17;\n                              break;\n                            }\n\n                            _context2.prev = 2;\n                            _this2.loading = true;\n                            _context2.next = 6;\n                            return User.register(_this2.form);\n\n                          case 6:\n                            res = _context2.sent;\n\n                            if (res.code < window.MAX_SUCCESS_CODE) {\n                              _this2.loading = false;\n\n                              _this2.$message.success(\"\".concat(res.message));\n\n                              _this2.eventBus.$emit('addUser', true);\n\n                              _this2.resetForm(formName);\n                            }\n\n                            _context2.next = 15;\n                            break;\n\n                          case 10:\n                            _context2.prev = 10;\n                            _context2.t0 = _context2[\"catch\"](2);\n                            _this2.loading = false;\n\n                            if (_context2.t0.data.code === 10073) {\n                              _this2.$message.error(_context2.t0.data.message);\n                            } else {\n                              _this2.$message.error('新增用户失败');\n                            }\n\n                            console.log(_context2.t0);\n\n                          case 15:\n                            _context2.next = 35;\n                            break;\n\n                          case 17:\n                            if (!(_this2.form.email === _this2.info.email && _this2.form.group_ids.sort().toString() === _this2.info.group_ids.sort().toString())) {\n                              _context2.next = 20;\n                              break;\n                            }\n\n                            _this2.$emit('handleInfoResult', false);\n\n                            return _context2.abrupt(\"return\");\n\n                          case 20:\n                            _context2.prev = 20;\n\n                            if (_this2.form.group_ids.length) {\n                              _context2.next = 24;\n                              break;\n                            }\n\n                            _this2.$message.error('至少选择一个角色');\n\n                            return _context2.abrupt(\"return\");\n\n                          case 24:\n                            _this2.loading = true;\n                            _context2.next = 27;\n                            return Admin.updateOneUser(_this2.form.email, _this2.form.group_ids, _this2.id);\n\n                          case 27:\n                            res = _context2.sent;\n                            _context2.next = 34;\n                            break;\n\n                          case 30:\n                            _context2.prev = 30;\n                            _context2.t1 = _context2[\"catch\"](20);\n                            _this2.loading = false;\n                            console.log(_context2.t1);\n\n                          case 34:\n                            if (res.code < window.MAX_SUCCESS_CODE) {\n                              _this2.loading = false;\n\n                              _this2.$message.success(\"\".concat(res.message));\n\n                              _this2.$emit('handleInfoResult', true);\n                            } else {\n                              _this2.loading = false;\n\n                              _this2.$message.error(\"\".concat(res.message));\n                            }\n\n                          case 35:\n                            _context2.next = 39;\n                            break;\n\n                          case 37:\n                            console.log('error submit!!');\n\n                            _this2.$message.error('请填写正确的信息');\n\n                          case 39:\n                          case \"end\":\n                            return _context2.stop();\n                        }\n                      }\n                    }, _callee2, null, [[2, 10], [20, 30]]);\n                  }));\n\n                  return function (_x2) {\n                    return _ref.apply(this, arguments);\n                  };\n                }());\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function submitForm(_x) {\n        return _submitForm.apply(this, arguments);\n      }\n\n      return submitForm;\n    }(),\n    // 重置表单\n    resetForm: function resetForm(formName) {\n      if (this.pageType === 'edit') {\n        this.setInfo();\n      } else {\n        this.form.group_ids = [];\n        this.$refs[formName].resetFields();\n      }\n    },\n    // 设置用户信息\n    setInfo: function setInfo() {\n      this.form.username = this.info.username;\n      this.form.email = this.info.email;\n      this.form.tel = this.info.tel;\n      var temp = [];\n      this.info.group_ids.forEach(function (item) {\n        temp.push(item.id);\n      });\n      this.form.group_ids = temp;\n    }\n  },\n  // 生命周期=\n  created: function () {\n    var _created = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n      return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return this.fetchUserGroup();\n\n            case 2:\n              // 根据页面类型初始化\n              if (this.pageType === 'edit') {\n                this.setInfo();\n                this.isEdited = true;\n              }\n\n            case 3:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    }));\n\n    function created() {\n      return _created.apply(this, arguments);\n    }\n\n    return created;\n  }()\n};",{"version":3,"mappings":"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","names":["props","submit","type","default","id","groups","labelPosition","info","pageType","inject","computed","filteredGroups","data","callback","loading","isEdited","form","username","password","tel","confirm_password","email","nickname","group_ids","userGroupId","rules","trigger","required","validator","message","methods","fetchUserGroup","User","res","console","submitForm","formName","valid","Admin","resetForm","setInfo","temp","created"],"sourceRoot":"src/view/admin/user","sources":["user-info.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <el-form :model=\"form\" status-icon :rules=\"rules\" :label-position=\"labelPosition\" ref=\"form\" label-width=\"100px\"\n      @submit.native.prevent>\n      <el-form-item label=\"用户名\" prop=\"username\">\n        <el-input size=\"medium\" clearable v-model=\"form.username\" :disabled=\"isEdited\"></el-input>\n      </el-form-item>\n      <el-form-item label=\"邮箱\" prop=\"email\">\n        <el-input size=\"medium\" clearable v-model=\"form.email\" :disabled=\"isEdited\" auto-complete=\"new-password\">\n        </el-input>\n      </el-form-item>\n      <el-form-item label=\"电话\" prop=\"tel\">\n        <el-input size=\"medium\" clearable v-model=\"form.tel\" :disabled=\"isEdited\" auto-complete=\"new-password\">\n        </el-input>\n      </el-form-item>\n      <el-form-item v-if=\"pageType === 'add'\" label=\"密码\" prop=\"password\">\n        <el-input size=\"medium\" clearable type=\"password\" v-model=\"form.password\" auto-complete=\"new-password\">\n        </el-input>\n      </el-form-item>\n      <el-form-item v-if=\"pageType === 'add'\" label=\"确认密码\" prop=\"confirm_password\" label-position=\"top\">\n        <el-input size=\"medium\" clearable type=\"password\" v-model=\"form.confirm_password\" autocomplete=\"off\"></el-input>\n      </el-form-item>\n      <el-form-item v-if=\"pageType !== 'password'\" label=\"选择角色\">\n        <el-checkbox-group v-model=\"form.group_ids\" size=\"small\" style=\"transform: translateY(5px);\">\n          <el-checkbox v-for=\"item in filteredGroups\" :key=\"item.id\" :label=\"item.id\" border style=\"margin-left: 0\">\n            {{ item.name }}\n          </el-checkbox>\n        </el-checkbox-group>\n      </el-form-item>\n      <el-form-item v-show=\"submit\" class=\"submit\">\n        <el-button type=\"primary\" :loading=\"loading\" @click=\"submitForm('form')\">保 存</el-button>\n        <el-button @click=\"resetForm('form')\">重 置</el-button>\n      </el-form-item>\n    </el-form>\n  </div>\n</template>\n\n<script>\nimport Admin from '@/lin/model/admin'\nimport User from '@/lin/model/user'\n\nexport default {\n  props: {\n    submit: {\n      type: Boolean, // 表单是否显示功能按钮\n      default: true,\n    },\n    id: {\n      // 用户id\n      type: Number,\n      default: undefined,\n    },\n    groups: {\n      // 所有分组\n      type: Array,\n      default: () => [],\n    },\n    labelPosition: {\n      // 表单label位置\n      type: String,\n      default: 'right',\n    },\n    info: {\n      // 用户信息\n      type: Object,\n      default: () => ({}),\n    },\n    pageType: {\n      type: String,\n      default: 'add', // 区分编辑页面/添加页面\n    },\n  },\n  inject: ['eventBus'],\n  computed: {\n    filteredGroups() {\n      // 如果用户组ID是1或5，显示所有角色\n      if (this.userGroupId === 1 || this.userGroupId === 5) {\n        return this.groups;\n      }\n      \n      // 否则过滤掉ID为5的角色\n      return this.groups.filter(group => group.id !== 5);\n    }\n  },\n  \n  data() {\n    // 验证回调函数\n    const checkUserName = (rule, value, callback) => {\n      // eslint-disable-line\n      if (!value) {\n        callback(new Error('用户名不能为空'))\n      }\n      callback()\n    }\n    const validatePassword = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error('请输入密码'))\n      } else if (value.length < 6) {\n        callback(new Error('密码长度不能少于6位数'))\n      } else {\n        if (this.form.checkPassword !== '') {\n          this.$refs.form.validateField('confirm_password')\n        }\n        callback()\n      }\n    }\n    const validatePassword2 = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error('请再次输入密码'))\n      } else if (value !== this.form.password) {\n        callback(new Error('两次输入密码不一致!'))\n      } else {\n        callback()\n      }\n    }\n    return {\n      loading: false, // 加载动画\n      isEdited: false, // 能否编辑\n      form: {\n        username: '',\n        password: '',\n        tel: '',\n        confirm_password: '',\n        email: '',\n        nickname: '',\n        group_ids: [],\n      },\n      userGroupId: null, // 当前用户的组ID\n      // 验证规则\n      rules: {\n        nickname: [\n          {\n            trigger: ['blur', 'change'],\n            required: true,\n          },\n        ],\n        tel: [\n          {\n            trigger: ['blur', 'change'],\n            required: true,\n          },\n        ],\n        username: [\n          {\n            validator: checkUserName,\n            trigger: ['blur', 'change'],\n            required: true,\n          },\n        ],\n        password: [{ validator: validatePassword, trigger: 'blur', required: true }],\n        confirm_password: [{ validator: validatePassword2, trigger: 'blur', required: true }],\n        email: [\n          {\n            type: 'email',\n            message: '请输入正确的邮箱地址或者不填',\n            trigger: ['blur', 'change'],\n          },\n        ],\n      },\n    }\n  },\n  methods: {\n    // 获取当前用户的组ID\n    async fetchUserGroup() {\n      try {\n        const res = await User.getGroup();\n        this.userGroupId = res; \n      } catch (error) {\n        console.error('获取用户组信息失败', error);\n      }\n    },\n    \n    // 提交表单\n    async submitForm(formName) {\n      this.$refs[formName].validate(async valid => {\n        // eslint-disable-line\n        if (valid) {\n          // 新增用户\n          let res\n          if (this.pageType === 'add') {\n            try {\n              this.loading = true\n              res = await User.register(this.form)\n              if (res.code < window.MAX_SUCCESS_CODE) {\n                this.loading = false\n                this.$message.success(`${res.message}`)\n                this.eventBus.$emit('addUser', true)\n                this.resetForm(formName)\n              }\n            } catch (e) {\n              this.loading = false\n              if (e.data.code === 10073) {\n                this.$message.error(e.data.message)\n              } else {\n                this.$message.error('新增用户失败')\n              }\n              console.log(e)\n            }\n          } else {\n            // 更新用户信息\n            if (\n              this.form.email === this.info.email\n              && this.form.group_ids.sort().toString() === this.info.group_ids.sort().toString()\n            ) {\n              this.$emit('handleInfoResult', false)\n              return\n            }\n            try {\n              if (!this.form.group_ids.length) {\n                this.$message.error('至少选择一个角色')\n                return\n              }\n              this.loading = true\n              res = await Admin.updateOneUser(this.form.email, this.form.group_ids, this.id)\n            } catch (e) {\n              this.loading = false\n              console.log(e)\n            }\n            if (res.code < window.MAX_SUCCESS_CODE) {\n              this.loading = false\n              this.$message.success(`${res.message}`)\n              this.$emit('handleInfoResult', true)\n            } else {\n              this.loading = false\n              this.$message.error(`${res.message}`)\n            }\n          }\n        } else {\n          console.log('error submit!!')\n          this.$message.error('请填写正确的信息')\n        }\n      })\n    },\n    \n    // 重置表单\n    resetForm(formName) {\n      if (this.pageType === 'edit') {\n        this.setInfo()\n      } else {\n        this.form.group_ids = []\n        this.$refs[formName].resetFields()\n      }\n    },\n    \n    // 设置用户信息\n    setInfo() {\n      this.form.username = this.info.username\n      this.form.email = this.info.email\n      this.form.tel = this.info.tel\n      const temp = []\n      this.info.group_ids.forEach(item => {\n        temp.push(item.id)\n      })\n      this.form.group_ids = temp\n    },\n  },\n  \n  // 生命周期=\n  async created() {\n    // 获取当前用户组信息\n    await this.fetchUserGroup();\n    \n    // 根据页面类型初始化\n    if (this.pageType === 'edit') {\n      this.setInfo()\n      this.isEdited = true\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.container {\n  margin-top: 20px;\n  margin-left: -5px;\n  max-width: 800px;\n\n  .submit {\n    float: left;\n  }\n}\n</style>"]}]}